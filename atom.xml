<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无言</title>
  
  <subtitle>无言</subtitle>
  <link href="http://fx-zpy.github.io/atom.xml" rel="self"/>
  
  <link href="http://fx-zpy.github.io/"/>
  <updated>2021-10-13T04:53:23.335Z</updated>
  <id>http://fx-zpy.github.io/</id>
  
  <author>
    <name>fx-zpy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贪心算法初练</title>
    <link href="http://fx-zpy.github.io/posts/6d8ecaef.html"/>
    <id>http://fx-zpy.github.io/posts/6d8ecaef.html</id>
    <published>2021-10-13T02:47:46.000Z</published>
    <updated>2021-10-13T04:53:23.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>这是一道简单的greedy题目，题目描述如下，假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这里读完题目之后可以发现，关键条件为s[j] &gt;= g[i]，也就是寻找满足这个条件的最低s[j]即可满足g[i]，那么首先可以将孩子满足度和饼干能量度进行排序，然后遍历寻找到满足条件的即可，这里我没用C语言，因为对两个数组进行排序太麻烦了，这里主要是为了锻炼自己的算法，所以使用了go语言，正好也复习一下go语言，直接调用sort来进行排序，代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>g <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    count<span class="token punctuation">,</span>gl<span class="token punctuation">,</span>sl<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gl<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>sl<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token operator">&lt;</span>sl<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">{</span>            j<span class="token operator">++</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> j<span class="token operator">&lt;</span>sl<span class="token punctuation">{</span>            count<span class="token operator">++</span>            j<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我运行的时间太慢了，因为我是以孩子的需求为上，优先考虑了孩子的需求，看了一下别人的思路，可以直接从饼干的角度出发，能分配就分配，不能继续下一个孩子，这样会快一点。</p><h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。说明：你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="/medias/blog/1.jpg" alt="柱形图"></p><pre class="line-numbers language-none"><code class="language-none">输入：[1,8,6,2,5,4,8,3,7]输出：49 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h4 id="第一次错误"><a href="#第一次错误" class="headerlink" title="第一次错误"></a>第一次错误</h4><p>错误的原因的是超出时间限制，我读完题之后就想到了一个大家都会想到的办法，就是使用双层循环，遍历寻找最大的面积，可是却超时了，这就说明了<del>测试用例刁难人(T^T)</del>算法的重要性。代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    max<span class="token operator">:=</span><span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token operator">:=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">{</span>            h<span class="token operator">:=</span><span class="token function">Min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            max<span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>h<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重新构思"><a href="#重新构思" class="headerlink" title="重新构思"></a>重新构思</h4><p>错误以后我看了一下官方的题解寻找思路，官方是使用双指针来指向前后两个位置，并且移动来寻找最大的面积处，双指针的思路其实不难，就是初始的时候两个指针分别指向第一个数字和最后一个数字，然后计算出面积值，接下来移动较小的那一个，因为两者是相互靠近，距离缩短，如果面积想要变大，肯定是需要最短边长变大，如果移动较大的那一边，那么最短边只会和原来相同甚至更小，这样面积只会越来越小，所以移动较小的那个指针，最终等到两个指针相遇就停止，改进后的代码如下，这次时间没有超出限制，还击败了98%的使用go语言解题的人(叉腰.jpg)。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    max<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">{</span>        h<span class="token operator">:=</span><span class="token function">Min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span>        max<span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>h<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            r<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一道题较为简单，但是仍有优化的空间，第二题也是学会了使用双指针来解决问题，而不用暴力求解，这样只会被测试样例教做人(-_-)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分发饼干&quot;&gt;&lt;a href=&quot;#分发饼干&quot; class=&quot;headerlink&quot; title=&quot;分发饼干&quot;&gt;&lt;/a&gt;分发饼干&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://fx-zpy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="GO" scheme="http://fx-zpy.github.io/tags/GO/"/>
    
    <category term="LeetCode" scheme="http://fx-zpy.github.io/tags/LeetCode/"/>
    
    <category term="greedy" scheme="http://fx-zpy.github.io/tags/greedy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode几道dp中等题</title>
    <link href="http://fx-zpy.github.io/posts/db0f04bc.html"/>
    <id>http://fx-zpy.github.io/posts/db0f04bc.html</id>
    <published>2021-10-11T02:16:46.000Z</published>
    <updated>2021-10-19T08:20:38.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题和之前所做的合唱队形有点像，但是这不是求解最大增序列，而是增减交替的序列，首选还是一个一个分析，如果所给序列的长度只有一，那么返回的子序列的长度也是一，如果序列的长度超过一个，就可以使用两个变量up,down来计算上升和下降的个数，这里的增加数目是在对方的基础上进行的，因为要计算最长的子序列而不是最长增序列或者减序列。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> up<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> down<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            up<span class="token operator">=</span>down<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            down<span class="token operator">=</span>up<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>up<span class="token operator">&gt;</span>down<span class="token punctuation">)</span><span class="token operator">?</span>up<span class="token operator">:</span>down<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。你可以认为每种硬币的数量是无限的。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这是一个很经典的背包问题，背包是固定的，物品是多个的，我们只要求把背包填满就好了，这里使用动态规划，或者DFS加剪枝都可以，我使用的是DP，至于为什么不用DFS，因为<del>不会</del>我写完了看题解才发现可以使用这种方法，这里可以使用一个数组dp来接收局部最优解。dp[0]初始化0，其他初始化足够大的数，因为求最少的数目，我这里初始化为100000，只需要满足测试用例的要求即可。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span><span class="token operator">*</span> dp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>coinsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">?</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">&gt;</span>amount<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里也copy一下其他人的题解，关于使用DFS和BFS来求解的。实属强者，LeetCode的算法大佬太多了，膜拜。</p><p>以下为DFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">:</span>    def <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span><span class="token operator">:</span>        coins<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token class-name">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>                def <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">if</span> amount <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>                self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>res<span class="token punctuation">,</span> num<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>                # 剩下的最大值都不够凑出来了                <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>res <span class="token operator">-</span> num<span class="token punctuation">)</span> <span class="token operator">*</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token operator">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">if</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> amount<span class="token operator">:</span>                    <span class="token keyword">continue</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> amount <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>                    <span class="token keyword">return</span> self<span class="token punctuation">.</span>res <span class="token keyword">if</span> self<span class="token punctuation">.</span>res <span class="token operator">!=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为BFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">:</span>    def <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span><span class="token operator">:</span>        from collections <span class="token keyword">import</span> <span class="token namespace">deque</span>        queue <span class="token operator">=</span> <span class="token function">deque</span><span class="token punctuation">(</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">)</span>        step <span class="token operator">=</span> <span class="token number">0</span>        visited <span class="token operator">=</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token operator">:</span>            n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>            <span class="token keyword">for</span> _ in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>                tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>                    <span class="token keyword">return</span> step                <span class="token keyword">for</span> coin in coins<span class="token operator">:</span>                    <span class="token keyword">if</span> tmp <span class="token operator">&gt;=</span> coin and tmp <span class="token operator">-</span> coin not in visited<span class="token operator">:</span>                        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> coin<span class="token punctuation">)</span>                        queue<span class="token punctuation">.</span><span class="token function">appendleft</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> coin<span class="token punctuation">)</span>            step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个正整数 <em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这里需要注意审题， 我刚开始读题不仔细，以为是分解成两个正整数，兴致勃勃的开始做题，不到两分钟代码就写好了，心里不禁想到，中等题就这，结果不小心瞟到了题目的要求，<strong>至少</strong>，顿时麻了，赶紧删掉了自己刚写好的代码，并且内心说了句，<del>私密马赛</del>。是我愚蠢了，那么重新分析，既然是至少，那么就不限制分解成2个了，但是想了想，不太好解，如果自底向上，往上也不好分析，因为这个不像之前的蜜蜂和走楼梯，后一个的问题只依赖于前一个和前两个问题的最优解。这里看了一下别人的思路，发现宝藏，一个人的思路是这样，根据数学的规律来解这道题，可以大大简化题目的复杂度，求解y=(n/x)^x的最大解，并且最大解的时候x的值为多少，最后算出来x=e的时候y最大，所以只要多分解出e得到的成绩就会越大，但是题目要求为正整数，所以从2和3中选择，这里随便取一个n实验一下，比如12=2+2+2+2+2+2=3+3+3+3,2^6=64,3^4=81，很显然，3比2具有更大的乘积，所以就将所给的n尽量分解成3,能够得到最大的乘积。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>            a<span class="token operator">*=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dp的思想还是局部最优解的推进，但是可以使用数学知识来简化问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摆动序列&quot;&gt;&lt;a href=&quot;#摆动序列&quot; class=&quot;headerlink&quot; title=&quot;摆动序列&quot;&gt;&lt;/a&gt;摆动序列&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="刷题" scheme="http://fx-zpy.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="DP" scheme="http://fx-zpy.github.io/tags/DP/"/>
    
    <category term="LeetCode" scheme="http://fx-zpy.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>go实现简单群聊服务器</title>
    <link href="http://fx-zpy.github.io/posts/4b92e806.html"/>
    <id>http://fx-zpy.github.io/posts/4b92e806.html</id>
    <published>2021-10-07T08:44:46.000Z</published>
    <updated>2021-10-07T09:20:34.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP群聊服务器实现"><a href="#TCP群聊服务器实现" class="headerlink" title="TCP群聊服务器实现"></a>TCP群聊服务器实现</h2><p>之前实现了TCP服务器，可以和客户端通信，这次进行了扩展，将多个客户端的通信集中到一起，形成群聊系统，服务器的主体代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">type</span> client <span class="token keyword">struct</span> <span class="token punctuation">{</span>c    <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token comment">//发送数据的管道</span>name <span class="token builtin">string</span>      <span class="token comment">//姓名</span>addr <span class="token builtin">string</span>      <span class="token comment">//地址</span><span class="token punctuation">}</span><span class="token keyword">var</span> onlinemap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>client <span class="token comment">//保存在线用户</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>onlinemap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>client<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>message <span class="token comment">//如果message通道没有消息就阻塞</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cli <span class="token operator">:=</span> <span class="token keyword">range</span> onlinemap <span class="token punctuation">{</span>cli<span class="token punctuation">.</span>c <span class="token operator">&lt;-</span> msg <span class="token comment">//遍历map，给每个成员都发送信息，相当于广播</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">writemsgtoclient</span><span class="token punctuation">(</span>cli client<span class="token punctuation">,</span> ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> cli<span class="token punctuation">.</span>c <span class="token punctuation">{</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli client<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buf <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> cli<span class="token punctuation">.</span>addr <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> cli<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dispose</span><span class="token punctuation">(</span>ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取客户端的网络地址</span>cliaddr <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建一个结构体默认用户名和网络地址一样</span>cli <span class="token operator">:=</span> client<span class="token punctuation">{</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cliaddr<span class="token punctuation">,</span> cliaddr<span class="token punctuation">}</span>onlinemap<span class="token punctuation">[</span>cliaddr<span class="token punctuation">]</span> <span class="token operator">=</span> cli <span class="token comment">//将结构体添加到map</span><span class="token comment">//新开一个协程，给当前客户发送信息</span><span class="token keyword">go</span> <span class="token function">writemsgtoclient</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> ac<span class="token punctuation">)</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"login"</span><span class="token punctuation">)</span>cli<span class="token punctuation">.</span>c <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"I am here"</span><span class="token punctuation">)</span>isexit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">//新建协程，接受用户发送的数据</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>isexit <span class="token operator">&lt;-</span> <span class="token boolean">true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>msg <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"who"</span> <span class="token punctuation">{</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"user list:\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tmp <span class="token operator">:=</span> <span class="token keyword">range</span> onlinemap <span class="token punctuation">{</span>msg <span class="token operator">=</span> tmp<span class="token punctuation">.</span>addr <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\n"</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"rename"</span> <span class="token punctuation">{</span>name <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>cli<span class="token punctuation">.</span>name <span class="token operator">=</span> nameonlinemap<span class="token punctuation">[</span>cliaddr<span class="token punctuation">]</span> <span class="token operator">=</span> clifmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rename successfully"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>isexit<span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span>onlinemap<span class="token punctuation">,</span> cliaddr<span class="token punctuation">)</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//开启循环，一直开启协程</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开一个协程，转发信息</span><span class="token keyword">go</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//主协程，循环阻塞等待用户连接</span><span class="token keyword">for</span> <span class="token punctuation">{</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">go</span> <span class="token function">dispose</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本次服务器开启的端口依旧是本地的4000端口，每个客户端可以修改自己的名称，默认的名称是地址，同时上线和退出都会有login和logout的提示。如果输入的是who那么就会给出当前在线的用户列表。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里我单开一个窗口作为旁观者可以观看到其他人发的信息，俗称<del>摸鱼</del>窥屏怪。其他的我开了三个用户，分别重新命名为zpy,xsg,hs他们进行聊天。</p><p><img src="/medias/blog/14.png" alt="窥屏怪视角"></p><p><img src="/medias/blog/15.png" alt="zpy视角"></p><p><img src="/medias/blog/16.png" alt="xsg视角"></p><p>这边hs的视角忘记截图了，不过有前两个人的视角应该就够了，这个群聊做的很简单，界面布局也没有什么设计，包括敏感词汇屏蔽和@功能实现都还没有做，后续随缘更新功能和界面，这次只是为了能够实现聊天的主题功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP群聊服务器实现&quot;&gt;&lt;a href=&quot;#TCP群聊服务器实现&quot; class=&quot;headerlink&quot; title=&quot;TCP群聊服务器实现&quot;&gt;&lt;/a&gt;TCP群聊服务器实现&lt;/h2&gt;&lt;p&gt;之前实现了TCP服务器，可以和客户端通信，这次进行了扩展，将多个客户端的通信</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://fx-zpy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="GO" scheme="http://fx-zpy.github.io/tags/GO/"/>
    
    <category term="TCP" scheme="http://fx-zpy.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记之tcp服务器</title>
    <link href="http://fx-zpy.github.io/posts/db7cd9a0.html"/>
    <id>http://fx-zpy.github.io/posts/db7cd9a0.html</id>
    <published>2021-10-05T07:43:46.000Z</published>
    <updated>2021-10-07T08:48:56.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单程TCP服务器"><a href="#单程TCP服务器" class="headerlink" title="单程TCP服务器"></a>单程TCP服务器</h1><p>这是只接受来自客户端的一次通信就停止的服务器，也是后面并发服务器的基础知识，服务器的构成代码是用go语言编写，如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span> <span class="token comment">//监听本地4000端口</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在用户连接之前阻塞</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">//分配一个4096字节的缓冲区来接收用户的数据</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">//返回数据长度和错误信息</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data="</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">defer</span> ac<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用net里面的函数listen对本地4000端口进行监听，为啥是4000端口，其实端口号无所谓，4000端口是每次更新博客的时候本地调试的端口，因为经常能看<del>色图</del>博客，所以使用该端口，这里接受信息的缓冲区的大小为4096，也就是4kb，来自4000端口发送的数据大小不能超过该大小，使用的时候不会报错，但是服务器端只会截取规定缓冲区的大小，我实验过使用的大小为4的缓冲区来接受超过10个字节的数据，最后只是截取到前四个字节的数据就结束了。这里使用netcat下的一个可执行程序nc来进行数据的发送。分配好端口号之后就发送数据，同时服务器端接受到数据之后就停止了，因为本身就是一个单程的服务器。</p><p><img src="/medias/blog/9.png" alt="服务器端接收数据"></p><h1 id="并发服务器"><a href="#并发服务器" class="headerlink" title="并发服务器"></a>并发服务器</h1><p>并发服务器支持对多个客户端进行数据的传送与接收。</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器端的代码在之前单程服务器的基础上进行改进，增加协程来处理与客户端的交互。主体代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Dispose</span><span class="token punctuation">(</span>ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>add <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//处理客户端的端口号</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token string">" connected successfully"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> ac<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token comment">//接收客户端数据</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from client is"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//打印接收到数据</span><span class="token keyword">if</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"exit"</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>ret <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sb"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span> <span class="token comment">//将数据中的不文明词汇和谐，这里只处理了sb这个经常出现的词汇</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>                                       <span class="token comment">//返回数据</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span> <span class="token comment">//监听本地4000端口</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在用户连接之前阻塞</span><span class="token keyword">for</span> <span class="token punctuation">{</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">go</span> <span class="token function">Dispose</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过协程对每一个请求的客户端的数据都能进行处理，在实际工作中服务器端接收到客户端的数据之后可以进行很多处理，我这里仅仅进行了对敏感词汇sb的和谐，并把数据重新发回给客户端。上述代码的停止条件是输入exit，这里的处理仅仅适用于nc测试，因为nc测试中我们输入了exit回车之后换行也一并输入了进来，所以上述代码中判断条件为string(buffer[:len-1]) == “exit”，自编客户端程序进行测试的时候由于编写者的不同，数据的处理可能不同。需要根据实际情况进行修改。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>这里我开了两个进程来测试服务器端能否实现并发，结果发现可以。输入exit客户端也能顺利的结束进程。</p><p><img src="/medias/blog/10.png" alt="测试并发"></p><p><img src="/medias/blog/11.png" alt="测试结束"></p><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><p>这里也可以自编客户端程序进行测试，主动连接对应的端口号，对其进行数据的交互。这里我写了一个客户端程序进行测试，也是使用go语言进行编写。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置连接的端口号</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开启协程，接收服务器端的回复</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token comment">//读取数据</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from server is"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//给服务器端发送数据</span>se <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span> <span class="token comment">//从键盘读取内容</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>se<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//将输入的信息发送给服务器</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试截图如下</p><p><img src="/medias/blog/12.png" alt="客户端程序测试"></p><p>注意这里输入exit不能退出，因为客户端输入的时候输入回车，字符串后面会跟着两个字符，回车\r，换行\n，所以服务器端需要进行修改才能退出客户端程序，即将服务器端的判断条件改为string(buffer[:len-1]) == “exit”。但是这样感觉不方便，可以在测试的客户端输入条件判断一下，为exit就退出。当然这些都是小细节。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单程和并发区别在于是否使用了协程，本次测试也用到了<del>脑残</del>nc和客户端程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单程TCP服务器&quot;&gt;&lt;a href=&quot;#单程TCP服务器&quot; class=&quot;headerlink&quot; title=&quot;单程TCP服务器&quot;&gt;&lt;/a&gt;单程TCP服务器&lt;/h1&gt;&lt;p&gt;这是只接受来自客户端的一次通信就停止的服务器，也是后面并发服务器的基础知识，服务器的构成代码</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://fx-zpy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="GO" scheme="http://fx-zpy.github.io/tags/GO/"/>
    
    <category term="TCP" scheme="http://fx-zpy.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>合唱队形&amp;&amp;过河卒</title>
    <link href="http://fx-zpy.github.io/posts/9c48d863.html"/>
    <id>http://fx-zpy.github.io/posts/9c48d863.html</id>
    <published>2021-10-04T08:28:18.000Z</published>
    <updated>2021-10-06T01:49:32.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合唱队形"><a href="#合唱队形" class="headerlink" title="合唱队形"></a>合唱队形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>N位同学站成一排，音乐老师要请其中的(N?K)位同学出列，使得剩下的K位同学排成合唱队形。合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1,2,…,K，他们的身高分别为T1,T2,…,TK。身高满足T1&lt;…<ti>Ti+1&gt;…&gt;TK(1≤i≤K)。你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。输入有两行，第一行是一个整数N(2≤N≤100)，表示同学的总数。第二行有N个整数，用空格分隔，第i个整数Ti(130≤Ti≤230)是第i位同学的身高(厘米)。输出最少需要同学出列的个数。</ti></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="第一次错误尝试"><a href="#第一次错误尝试" class="headerlink" title="第一次错误尝试"></a>第一次错误尝试</h3><p>第一次我的思路是每次标定一个人，从他开始依次向左和右进行筛选，如果有后一个比前一个高的情况出现，就判定前一个得出队列，当然我还没有意识到问题的严重性，连调试都没做就去提交了，结果可想而知，10个测试点就过了一个，以下是第一次的代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> min<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">99</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> a <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> a <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>min <span class="token operator">=</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误以后我自己进行了分析，发现，如果在我选定的那一个人的右边第一位是他右边最低的，而从右边第二位开始依次递减，那么我的算法就把从第二位开始的人全部踢出去了这显然不符合最少的规则，正确的是只需要把右边第一位踢出去就可以了。</p><h3 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h3><p>经过分析以后，我开始转换思路，依旧选定一个人做参照，将合唱队分成两个部分，然后分别从最左边和最右边向中间求最多人的增序列，这样踢出去的人就最少，两个数组分别存储左右的最大增序列的人数，但是注意，被当做参照物的那个人算了两次，所以要减去1。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> uflag<span class="token punctuation">,</span>dflag<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>uflag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>uflag <span class="token operator">=</span> uflag <span class="token operator">&gt;</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> uflag <span class="token operator">:</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> uflag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dflag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>dflag <span class="token operator">=</span> dflag <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> dflag <span class="token operator">:</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dflag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功通过了OJ。</p><h1 id="过河卒"><a href="#过河卒" class="headerlink" title="过河卒"></a>过河卒</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。棋盘用坐标表示，A点(0,0)、B点(n,m)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。输入一行四个正整数，分别表示B点坐标和马的坐标。坐标不超过（20,20）。输出一个整数，表示所有的路径条数。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p><del>思路就是没有思路</del>题目给我的第一印象就是好难啊，我把题目给的一个示例在草稿纸上人工走了一遍，但是没有思路，如果没有这匹该死的马，那将简单多了，就像之前的小蜜蜂和爬楼梯一样，但是可惜没有，一个马最多限制了九个点无法通过，有可能马的位置离边境较近，9个点中有部分不在（0,0）和（n,m）为顶点组成的矩形里面，我的初始想法是先求出所有的路径，然后把路径中包含马的控制点的路径排除，这个想法我没去实现，因为我在大脑里面过了一下，预感时空限制可能通不过OJ，于是打开了谷歌，搜索过河卒（bushi。看了别人的思路之后感觉豁然开朗，路径条数的dp还是我之前说的那样，每到每一个点的个数是上面点和左边点的个数之和，这里我用了一个二维数组，初始化都为0，将马的控制点设置为-1（之后再调整为0），每个数组元素的值就是到该点的路径条数之和，再用dp到(n,m)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">long</span> <span class="token keyword">long</span> path<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> mx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> my<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>path<span class="token punctuation">[</span>x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>path<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> path<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这么简单的题目我都能卡住，我太菜了o(╥﹏╥)o，CSP危。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;合唱队形&quot;&gt;&lt;a href=&quot;#合唱队形&quot; class=&quot;headerlink&quot; title=&quot;合唱队形&quot;&gt;&lt;/a&gt;合唱队形&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="刷题" scheme="http://fx-zpy.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="CSP" scheme="http://fx-zpy.github.io/tags/CSP/"/>
    
    <category term="DP" scheme="http://fx-zpy.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>逆向简单题之dotnetcrack</title>
    <link href="http://fx-zpy.github.io/posts/a651b15e.html"/>
    <id>http://fx-zpy.github.io/posts/a651b15e.html</id>
    <published>2021-10-03T02:36:08.000Z</published>
    <updated>2021-10-03T03:04:48.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>这道题是我的一个同学转了安全以后发给我让我帮忙做一下，但是其实本来我也没有接触多少逆向的知识，但是还是打算尝试一下，题目是dotnetcrack，打开可执行程序以后，弹出一个弹窗如下</p><img src="/medias/blog/1.png" alt="弹窗" style="zoom:50%;"><p>尝试输入一串字符串，发现报错。</p><img src="/medias/blog/2.png" alt="报错" style="zoom:50%;"><p>学习了一下这方面的知识以后，也是使用了一款反编译工具ILSpy将程序进行反编译，找到判断的关键代码，</p><img src="/medias/blog/3.png" alt="反编译后代码" style="zoom: 50%;"><p>如图可以发现其判断的语句是”2yyUjXprc1+2TwAbbVU6eQ==” == Encode(textBox1.Text)，显然，正确的字符串进行某种规则加密后的密文为2yyUjXprc1+2TwAbbVU6eQ==。</p><h2 id="解法一：投机取巧"><a href="#解法一：投机取巧" class="headerlink" title="解法一：投机取巧"></a>解法一：投机取巧</h2><p>已知判断条件之后，可以修改判断条件为!=，因为随机输入一串字符串，相等的概率极低，那么相反，不相等的概率极高，修改之后，随便输入只要不是正确的明文就可以弹出恭喜的弹窗，实验了一下，因为ILSpy不能直接修改代码，所以讲代码保存出来进行修改，</p><p><img src="/medias/blog/4.png" alt="修改判断逻辑"></p><p>保存之后重新编译该文件，这样随便输入就可以弹出正确的弹窗了。</p><p><img src="/medias/blog/5.png" alt="第一次尝试成功"></p><h2 id="解法二：再次投机取巧"><a href="#解法二：再次投机取巧" class="headerlink" title="解法二：再次投机取巧"></a>解法二：再次投机取巧</h2><p>由于解法一虽然可以弹出正确的弹窗，但是正确的明文却还是不知道，所以这次还是投机取巧的办法，但是能够获取明文，这里针对加密函数编写了一段解密函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">public</span> string <span class="token function">Decode</span><span class="token punctuation">(</span><span class="token parameter">string data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string result<span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byte1<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>byte1 <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span><span class="token string">"2yyUjXprc1+2TwAbbVU6eQ=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token constant">ASCII</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">"gctf{got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token constant">ASCII</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">"2niceday}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DESCryptoServiceProvider dESCryptoServiceProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESCryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MemoryStream memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CryptoStream cryptoStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CryptoStream</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">,</span>dESCryptoServiceProvider<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes2<span class="token punctuation">)</span><span class="token punctuation">,</span>CryptoStreamMode<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>cryptoStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byte1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byte1<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>cryptoStream<span class="token punctuation">.</span><span class="token function">FlushFinalBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding encoding <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>result <span class="token operator">=</span> encoding<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用该解密函数正确的密文进行解密得到正确的明文，这次不修改判断逻辑，修改错误的输出为解密正确的密文得到的明文。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token parameter">object sender<span class="token punctuation">,</span> EventArgs e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2yyUjXprc1+2TwAbbVU6eQ=="</span> <span class="token operator">==</span> <span class="token function">Encode</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"Congratulation~!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token function">Decode</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>textBox1.Text就是我们输入的内容，那么我们输入密文，弹出的就是正确的明文了</p><p><img src="/medias/blog/8.png" alt="修改错误输出"></p><p>这样就可以得到明文内容了，是H0lyTru3EasY，这里再把明文输入就可以得到正确的提示了。</p><img src="/medias/blog/7.png" alt="正确提示" style="zoom:50%;"><h2 id="解法三：直接解密"><a href="#解法三：直接解密" class="headerlink" title="解法三：直接解密"></a>解法三：直接解密</h2><p>因为上个学期也学过密码学原理这门课，虽然我学的不咋地，但是还是尝试读懂了加密函数，发现这里采用了DES的CBC加密模式，并且使用了Base64进行编码，那么可以直接利用网上的解密工具，密钥从代码中可以得知是gctf{got，偏移值是2niceday}，直接进行解密也能获得明文。</p><p><img src="/medias/blog/6.png" alt="在线解密"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#题目背景&quot; class=&quot;headerlink&quot; title=&quot;题目背景&quot;&gt;&lt;/a&gt;题目背景&lt;/h2&gt;&lt;p&gt;这道题是我的一个同学转了安全以后发给我让我帮忙做一下，但是其实本来我也没有接触多少逆向的知识，但是还是打算尝试一下，题目是d</summary>
      
    
    
    
    <category term="CTF" scheme="http://fx-zpy.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://fx-zpy.github.io/tags/CTF/"/>
    
    <category term="逆向" scheme="http://fx-zpy.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客&amp;&amp;动态规划</title>
    <link href="http://fx-zpy.github.io/posts/62cb98ee.html"/>
    <id>http://fx-zpy.github.io/posts/62cb98ee.html</id>
    <published>2021-10-02T03:43:08.000Z</published>
    <updated>2021-10-07T09:19:42.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>观察下面的数字金字塔。写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。第一个行一个正整数r,表示行的数目。后面每行为这个数字金字塔特定行包含的整数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        <span class="token number">7</span>       <span class="token number">3</span>   <span class="token number">8</span>     <span class="token number">8</span>   <span class="token number">1</span>   <span class="token number">0</span>   <span class="token number">2</span>   <span class="token number">7</span>   <span class="token number">4</span>   <span class="token number">4</span> <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">6</span>   <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>动态规划有两种路线，这道题我选择了从底向上，用一个数组来存储每一个点的局部最大和，从倒数第二层开始，一直到顶层，最后得到的数组的第一位数就是最大值，代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 最后可以通过OJ平台，但是在vs调试的时候发现数组栈溢出了。</p><h1 id="母牛的故事"><a href="#母牛的故事" class="headerlink" title="母牛的故事"></a>母牛的故事</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>通过列举前几年的关系，发现规律，前4年的数量和年份相同，第五年的时候，第二年的两头牛是成年母牛可以生殖了，所以应该是上一年的数量加上上四年的数量，因为题目给的年份不多，所以用一个55位的数组存储每一年的数量，再根据输入n的值，直接输出数组[n]。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">55</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一只小蜜蜂"><a href="#一只小蜜蜂" class="headerlink" title="一只小蜜蜂"></a>一只小蜜蜂</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。其中，蜂房的结构如下所示。</p><p><img src="/medias/blog/0.png" alt="小蜜蜂路线图"></p><p>输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b(0&lt;a&lt;b&lt;50)。对于每一个测试样例，输出蜜蜂从蜂房a到蜂房b的可能路线数。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>分析可知，a比b小，从a到b直接不好分析，从b开始，能直接到b的有b-1和b-2那么路线数就是两者之和，再分析b-1和b-2，发现规律一致，也是题目便利，数据都不大，可以用数组来表示可能路线数，这里的数组下标是两者的距离。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>b <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个坑，初始我定义k的时候类型是int，但是OJ报错，查了一下资料才发现数据越界，于是改成lli就行了。</p><h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数，对于每个测试实例，请输出不同走法的数量。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>这道题目读完以后不难发现，和小蜜蜂基本一致，只不过a固定是1罢了，数据范围还小了，直接上代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">41</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数字三角形&quot;&gt;&lt;a href=&quot;#数字三角形&quot; class=&quot;headerlink&quot; title=&quot;数字三角形&quot;&gt;&lt;/a&gt;数字三角形&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;</summary>
      
    
    
    
    <category term="刷题" scheme="http://fx-zpy.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="CSP" scheme="http://fx-zpy.github.io/tags/CSP/"/>
    
    <category term="DP" scheme="http://fx-zpy.github.io/tags/DP/"/>
    
  </entry>
  
</feed>
