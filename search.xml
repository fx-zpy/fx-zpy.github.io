<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hashmap底层实现原理</title>
      <link href="posts/9339c170.html"/>
      <url>posts/9339c170.html</url>
      
        <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>探索hashmap为什么可以实现O(1)查找一个元素是否存在，这里我查找了一下hashmap的底层原理</p><blockquote><p>源码地址为:<a href="https://github.com/golang/go/blob/master/src/runtime/map.go">https://github.com/golang/go/blob/master/src/runtime/map.go</a></p></blockquote><p>其中主要的结构体hmap</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// A header for a Go map.</span><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go.</span><span class="token comment">// Make sure this stays in sync with the compiler's definition.</span>count     <span class="token builtin">int</span> <span class="token comment">// # live cells == size of map.  Must be first (used by len() builtin)</span>flags     <span class="token builtin">uint8</span>B         <span class="token builtin">uint8</span>  <span class="token comment">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span>noverflow <span class="token builtin">uint16</span> <span class="token comment">// approximate number of overflow buckets; see incrnoverflow for details</span>hash0     <span class="token builtin">uint32</span> <span class="token comment">// hash seed</span>buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// array of 2^B Buckets. may be nil if count==0.</span>oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// previous bucket array of half the size, non-nil only when growing</span>nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">// progress counter for evacuation (buckets less than this have been evacuated)</span>extra <span class="token operator">*</span>mapextra <span class="token comment">// optional fields</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中各个变量的含义</p><table><thead><tr><th align="center">变量名</th><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">int</td><td align="center">键值对的数目</td></tr><tr><td align="center">flags</td><td align="center">uint8</td><td align="center">状态标识，比如正在被写、buckets和oldbuckets在被遍历、等量扩容(Map扩容相关字段)</td></tr><tr><td align="center">B</td><td align="center">uint8</td><td align="center">2^B=len(buckets)</td></tr><tr><td align="center">noverflow</td><td align="center">uint16</td><td align="center">溢出桶里bmap大致的数量</td></tr><tr><td align="center">hash0</td><td align="center">uint32</td><td align="center">hash因子</td></tr><tr><td align="center">buckets</td><td align="center">unsafe.Pointer</td><td align="center">指向一个数组(连续内存空间)，数组的类型为[]bmap，这个字段我们可以称之为正常桶</td></tr><tr><td align="center">oldbuckets</td><td align="center">unsafe.Pointer</td><td align="center">扩容时，存放之前的buckets(Map扩容相关字段)</td></tr><tr><td align="center">nevacuate</td><td align="center">uintptr</td><td align="center">分流次数，成倍扩容分流操作计数的字段(Map扩容相关字段)</td></tr><tr><td align="center">extra</td><td align="center">*mapextra</td><td align="center">溢出桶结构，正常桶里面某个bmap存满了，会使用这里面的内存空间存放键值对</td></tr></tbody></table><p>bmap结构体由三部分组成</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    tophash <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token comment">//存储哈希值的高8位</span>    data    <span class="token builtin">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">//key value数据:key/key/key/.../value/value/value...</span>    overflow <span class="token operator">*</span>bmap   <span class="token comment">//溢出bucket的地址</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个bucket可以存储8个键值对。</p><ul><li>tophash是个长度为8的数组，哈希值相同的键（准确的说是哈希值低位相同的键）存入当前bucket时会将哈希值的高位存储在该数组中，以方便后续匹配。</li><li>data区存放的是key-value数据，存放顺序是key/key/key/…value/value/value，如此存放是为了节省字节对齐带来的空间浪费。</li><li>overflow 指针指向的是下一个bucket，据此将所有冲突的键连接起来。</li></ul><p>注意：上述中data和overflow并不是在结构体中显示定义的，而是直接通过指针运算进行访问的。</p><p>下图展示bucket存放8个key-value对：</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/bucket1.png" alt="bucket"></p><h1 id="hash冲突"><a href="#hash冲突" class="headerlink" title="hash冲突"></a>hash冲突</h1><p>有的时候会出现hash冲突的情况，Go使用链地址法来解决键冲突。<br>由于每个bucket可以存放8个键值对，所以同一个bucket存放超过8个键值对时就会再创建一个键值对，用类似链表的方式将bucket连接起来。</p><p>下图展示产生冲突后的map：</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/hashchongtu.png" alt="hash冲突"></p><h1 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h1><p>负载因子用于衡量一个哈希表冲突情况，公式为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">负载因子 <span class="token operator">=</span> 键数量<span class="token operator">/</span>bucket数量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，对于一个bucket数量为4，包含4个键值对的哈希表来说，这个哈希表的负载因子为1.</p><p>哈希表需要将负载因子控制在合适的大小，超过其阀值需要进行rehash，也即键值对重新组织：</p><ul><li>哈希因子过小，说明空间利用率低</li><li>哈希因子过大，说明冲突严重，存取效率低</li></ul><p>每个哈希表的实现对负载因子容忍程度不同，比如Redis实现中负载因子大于1时就会触发rehash，而Go则在在负载因子达到6.5时才会触发rehash，因为Redis的每个bucket只能存1个键值对，而Go的bucket可能存8个键值对，所以Go可以容忍更高的负载因子。</p><h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><p>为了保证访问效率，当新元素将要添加进map时，都会检查是否需要扩容，扩容实际上是以空间换时间的手段。<br>触发扩容的条件有二个：</p><ol><li><p>负载因子 &gt; 6.5时，也即平均每个bucket存储的键值对达到6.5个。</p></li><li><p>overflow数量 &gt; 2^15时，也即overflow数量超过32768时。</p></li></ol><h2 id="增量扩容"><a href="#增量扩容" class="headerlink" title="增量扩容"></a>增量扩容</h2><p>当负载因子过大时，就新建一个bucket，新的bucket长度是原来的2倍，然后旧bucket数据搬迁到新的bucket。<br>考虑到如果map存储了数以亿计的key-value，一次性搬迁将会造成比较大的延时，Go采用逐步搬迁策略，即每次访问map时都会触发一次搬迁，每次搬迁2个键值对。</p><p>下图展示了包含一个bucket满载的map(为了描述方便，图中bucket省略了value区域):</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230122133452.png" style="zoom:75%;"><p>当前map存储了7个键值对，只有1个bucket。此地负载因子为7。再次插入数据时将会触发扩容操作，扩容之后再将新插入键写入新的bucket。</p><p>当第8个键值对插入时，将会触发扩容，扩容后示意图如下：</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230122133856.png" alt="增量扩容" style="zoom:50%;"><p>hmap数据结构中oldbuckets成员指身原bucket，而buckets指向了新申请的bucket。新的键值对被插入新的bucket中。<br>后续对map的访问操作会触发迁移，将oldbuckets中的键值对逐步的搬迁过来。当oldbuckets中的键值对全部搬迁完毕后，删除oldbuckets。</p><p>搬迁完成后的示意图如下：</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230122134040.png" style="zoom:50%;"><p>数据搬迁过程中原bucket中的键值对将存在于新bucket的前面，新插入的键值对将存在于新bucket的后面。<br>实际搬迁过程中比较复杂。</p><h2 id="等量扩容"><a href="#等量扩容" class="headerlink" title="等量扩容"></a>等量扩容</h2><p>所谓等量扩容，实际上并不是扩大容量，buckets数量不变，重新做一遍类似增量扩容的搬迁动作，把松散的键值对重新排列一次，以使bucket的使用率更高，进而保证更快的存取。<br>在极端场景下，比如不断地增删，而键值对正好集中在一小部分的bucket，这样会造成overflow的bucket数量增多，但负载因子又不高，从而无法执行增量搬迁的情况，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230122134235.png"></p><p>上图可见，overflow的bucket中大部分是空的，访问效率会很差。此时进行一次等量扩容，即buckets数量不变，经过重新组织后overflow的bucket数量会减少，即节省了空间又会提高访问效率。</p><h1 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h1><p>查找过程如下：</p><ol><li>根据key值算出哈希值</li><li>取哈希值低位与hmap.B取模确定bucket位置</li><li>取哈希值高位在tophash数组中查询</li><li>如果tophash[i]中存储值也哈希值相等，则去找到该bucket中的key值进行比较</li><li>当前bucket没有找到，则继续从下个overflow的bucket中查找。</li><li>如果当前处于搬迁过程，则优先从oldbuckets查找</li></ol><p>注：如果查找不到，也不会返回空值，而是返回相应类型的0值。</p><h1 id="插入过程"><a href="#插入过程" class="headerlink" title="插入过程"></a>插入过程</h1><p>新元素插入过程如下：</p><ol><li>根据key值算出哈希值</li><li>取哈希值低位与hmap.B取模确定bucket位置</li><li>查找该key是否已经存在，如果存在则直接更新值</li><li>如果没找到将key，将key插入</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="posts/af355a99.html"/>
      <url>posts/af355a99.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h2><blockquote><p>题目描述</p><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</p><p>示例 3：</p><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 10^4</li><li>-10^9 &lt;= nums[i] &lt;= 10^9</li><li>-10^9 &lt;= target &lt;= 10^9</li><li>只会存在一个有效答案</li></ul></blockquote><p>第一思路，暴力，两层循环寻找，时间复杂度O(n^2)，只需要两个变量即可，空间复杂度O(1)</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了官方题解，学会使用哈希表，以后类似的问题就可以这么解决，时间复杂度为O(n),但是因为要设置一个哈希表，所以需要O(n)的空间复杂度。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>hashtable <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>        <span class="token comment">//算法的优势是可以借助hash表达到O(1)的时间开销查找到某个元素是否存在</span><span class="token keyword">if</span> i<span class="token punctuation">,</span> ok <span class="token operator">:=</span> hashtable<span class="token punctuation">[</span>target<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> k<span class="token punctuation">}</span><span class="token punctuation">}</span>hashtable<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1、无重复字符的最长子串"><a href="#1、无重复字符的最长子串" class="headerlink" title="1、无重复字符的最长子串"></a>1、无重复字符的最长子串</h2><blockquote><p>题目描述</p><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><p>示例 2:</p><p>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p><p>示例 3:</p><p>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 5 * 10^4</li><li>s 由英文字母、数字、符号和空格组成</li></ul></blockquote><p>看完题目，这道题我居然做过？</p><p>官方解法，滑动窗口</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230122144019.png"></p><p>这里官方使用了逐步枚举，为了加深印象，我自己写了一遍代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>r<span class="token punctuation">,</span> ans <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//遍历一遍之后，删除前面一个元素</span><span class="token punctuation">}</span><span class="token keyword">for</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>r<span class="token operator">++</span><span class="token punctuation">}</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>ans <span class="token builtin">int</span><span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> ans<span class="token operator">&gt;</span>i<span class="token punctuation">{</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是结果太慢，这里主要是既然已经有了[i,r]这一段不含重复的字符的子串，那么就可以从r开始重新进行循环。类似KMP算法。对上面代码稍微改动一下就行。但是发现结果没有啥改进，因为需要删除r前面的所有元素。这里找到了一个双百的解答</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>start<span class="token punctuation">,</span> end <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>index <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;</span> end <span class="token punctuation">{</span>end <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>start <span class="token operator">+=</span> index <span class="token operator">+</span> <span class="token number">1</span>end <span class="token operator">+=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> end <span class="token operator">-</span> start<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心：只增大不减小的滑动窗口<br>流程：两个指针start和end表示窗口大小，遍历一次字符串，窗口在遍历过程中滑动或增大</p><p>窗口内没有重复字符：此时判断i+1与end的关系，超过表示遍历到窗口之外了，增大窗口大小<br>窗口内出现重复字符：此时两个指针都增大index+1，滑动窗口位置到重复字符的后一位<br>遍历结束，返回end-start，窗口大小</p><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="1、整数转罗马字符"><a href="#1、整数转罗马字符" class="headerlink" title="1、整数转罗马字符"></a>1、整数转罗马字符</h2><blockquote><p>题目描述</p><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给你一个整数，将其转为罗马数字。</p><p>示例 1:</p><p>输入: num = 3<br>输出: “III”</p><p>示例 2:</p><p>输入: num = 4<br>输出: “IV”</p><p>示例 3:</p><p>输入: num = 9<br>输出: “IX”</p><p>示例 4:</p><p>输入: num = 58<br>输出: “LVIII”<br>解释: L = 50, V = 5, III = 3.</p><p>示例 5:</p><p>输入: num = 1994<br>输出: “MCMXCIV”<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p>提示：</p><p>1 &lt;= num &lt;= 3999</p></blockquote><p>思路，最朴实的想法，既然num最多也就3999，那么把个十百千每种可能列出来，然后对num求模10除10即可得到各位的数字，然后对应获取即可</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>q <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"MM"</span><span class="token punctuation">,</span> <span class="token string">"MMM"</span><span class="token punctuation">}</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">,</span> <span class="token string">"CD"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"DC"</span><span class="token punctuation">,</span> <span class="token string">"DCC"</span><span class="token punctuation">,</span> <span class="token string">"DCCC"</span><span class="token punctuation">,</span> <span class="token string">"CM"</span><span class="token punctuation">}</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XX"</span><span class="token punctuation">,</span> <span class="token string">"XXX"</span><span class="token punctuation">,</span> <span class="token string">"XL"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"LX"</span><span class="token punctuation">,</span> <span class="token string">"LXX"</span><span class="token punctuation">,</span> <span class="token string">"LXXX"</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">}</span>g <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"II"</span><span class="token punctuation">,</span> <span class="token string">"III"</span><span class="token punctuation">,</span> <span class="token string">"IV"</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"VI"</span><span class="token punctuation">,</span> <span class="token string">"VII"</span><span class="token punctuation">,</span> <span class="token string">"VIII"</span><span class="token punctuation">,</span> <span class="token string">"IX"</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> ans <span class="token builtin">string</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ans <span class="token operator">+=</span> q<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ans <span class="token operator">+=</span> b<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ans <span class="token operator">+=</span> s<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ans <span class="token operator">+=</span> g<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123145112.png" style="zoom:50%;"><p>对比以前用java写的可以看出内存消耗要少得多，速度差不多</p><p>但是这题目在哈希表下面，于是看看官方题解是怎么做的，官方第二个思路和我的一样，只是简洁许多</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    thousands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"MM"</span><span class="token punctuation">,</span> <span class="token string">"MMM"</span><span class="token punctuation">}</span>    hundreds  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">,</span> <span class="token string">"CCC"</span><span class="token punctuation">,</span> <span class="token string">"CD"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"DC"</span><span class="token punctuation">,</span> <span class="token string">"DCC"</span><span class="token punctuation">,</span> <span class="token string">"DCCC"</span><span class="token punctuation">,</span> <span class="token string">"CM"</span><span class="token punctuation">}</span>    tens      <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"XX"</span><span class="token punctuation">,</span> <span class="token string">"XXX"</span><span class="token punctuation">,</span> <span class="token string">"XL"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"LX"</span><span class="token punctuation">,</span> <span class="token string">"LXX"</span><span class="token punctuation">,</span> <span class="token string">"LXXX"</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">}</span>    ones      <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"II"</span><span class="token punctuation">,</span> <span class="token string">"III"</span><span class="token punctuation">,</span> <span class="token string">"IV"</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"VI"</span><span class="token punctuation">,</span> <span class="token string">"VII"</span><span class="token punctuation">,</span> <span class="token string">"VIII"</span><span class="token punctuation">,</span> <span class="token string">"IX"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> thousands<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">+</span> hundreds<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">+</span> tens<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> ones<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个思路是把4和9相关的特殊符号一共13个罗列出来，然后用num不断的去减去不大于他的最大的那个符号，直到0。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> valueSymbols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>    value  <span class="token builtin">int</span>    symbol <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token string">"CM"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"CD"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"XL"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"IX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"IV"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    roman <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> vs <span class="token operator">:=</span> <span class="token keyword">range</span> valueSymbols <span class="token punctuation">{</span>        <span class="token keyword">for</span> num <span class="token operator">&gt;=</span> vs<span class="token punctuation">.</span>value <span class="token punctuation">{</span>            num <span class="token operator">-=</span> vs<span class="token punctuation">.</span>value            roman <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>roman<span class="token punctuation">,</span> vs<span class="token punctuation">.</span>symbol<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>roman<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和哈希表有啥关系？？？？？？？？</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="1、最长回文子串"><a href="#1、最长回文子串" class="headerlink" title="1、最长回文子串"></a>1、最长回文子串</h2><blockquote><p>题目描述</p><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p>示例 1：</p><p>输入：s = “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p><p>示例 2：</p><p>输入：s = “cbbd”<br>输出：”bb”</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s 仅由数字和英文字母组成</li></ul></blockquote><p>动态规划首先要找到动态规划方程，设dp(i,j)表示s[i:j]是否为回文子串，是就是true，否则为false那么就有dp(i,j)=dp(i+1,j-1)^(Si==Sj),当s的长度为1时，一定是回文串，为2时，若相等，则是回文串。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">}</span>n<span class="token punctuation">,</span> maxl<span class="token punctuation">,</span> r<span class="token punctuation">,</span> begin <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">//子串长度从2开始增长</span><span class="token keyword">for</span> L <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> L <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> L<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//左边界从0开始，右边界位置是r=i+L-1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>r <span class="token operator">=</span> i <span class="token operator">+</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">if</span> r <span class="token operator">&gt;</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//子串长度&lt;=3时只要两端相等就是回文子串，&gt;3的时候就要看内缩两位是否为回文串了</span><span class="token keyword">if</span> L <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>maxl <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxl<span class="token punctuation">,</span> L<span class="token punctuation">)</span>begin <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">[</span>begin <span class="token punctuation">:</span> begin<span class="token operator">+</span>maxl<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>ans <span class="token builtin">int</span><span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> ans <span class="token operator">&gt;</span> i <span class="token punctuation">{</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度是O(n^2)，因为有两层n循环，空间复杂度为O(n2),因为有二维可变切片(golang对于二维可变切片的定义真是苛刻，感觉不如java)。算法太过复杂，尝试看官方题解。</p><p>官方题解给出了思想二基本上就是逆向思维一，前面的方法是由外到内，现在是由内到外进行dp，中心算法，从符合的中心开始向外，比如，有两种情况，奇数和偶数，奇数只有一个中心，如果两侧相等，就继续外扩，直到不相等，偶数为两个相等的数作为中心。这样的话可以把空间复杂度降为O(1),因为不需要二重切片来存储是否为回文串这个状态，只要外扩停止，及时计算出此时串的长度用一个常数存起来就可以了，但是时间复杂度还是没变，因为每一个中心都可能要扩展到n的长度，所以时间复杂度为O(n^2)。但是实际运行中肯定不需要每个中心都要扩展到n，所以实际时间要比第一种方法好很多。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>start<span class="token punctuation">,</span> end <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>l1<span class="token punctuation">,</span> r1 <span class="token operator">:=</span> <span class="token function">Expand</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>l2<span class="token punctuation">,</span> r2 <span class="token operator">:=</span> <span class="token function">Expand</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> r1<span class="token operator">-</span>l1 <span class="token operator">&gt;</span> end<span class="token operator">-</span>start <span class="token punctuation">{</span>start<span class="token punctuation">,</span> end <span class="token operator">=</span> l1<span class="token punctuation">,</span> r1<span class="token punctuation">}</span><span class="token keyword">if</span> r2<span class="token operator">-</span>l2 <span class="token operator">&gt;</span> end<span class="token operator">-</span>start <span class="token punctuation">{</span>start<span class="token punctuation">,</span> end <span class="token operator">=</span> l2<span class="token punctuation">,</span> r2<span class="token punctuation">}</span>        <span class="token comment">//如果扩展到了整个字符串就不需要进行了</span>        <span class="token keyword">if</span> end<span class="token operator">-</span>start<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">[</span>start <span class="token punctuation">:</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Expand</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> l <span class="token builtin">int</span><span class="token punctuation">,</span> r <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>l<span class="token operator">--</span>r<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123175041.png" style="zoom:50%;"><p>算法改进的还是很多的。</p><p>官方算法还给了一种解法，在中心扩展算法上进行优化，减少不必要的重复步骤，可以将时空复杂度都控制在O(n)。但是，学不会〒▽〒</p><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="1、整数反转"><a href="#1、整数反转" class="headerlink" title="1、整数反转"></a>1、整数反转</h2><blockquote><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^31 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><p>示例 1：</p><p>输入：x = 123<br>输出：321</p><p>示例 2：</p><p>输入：x = -123<br>输出：-321</p><p>示例 3：</p><p>输入：x = 120<br>输出：21</p><p>示例 4：</p><p>输入：x = 0<br>输出：0</p><p>提示：</p><ul><li>-2^31 &lt;= x &lt;= 2^31 - 1</li></ul></blockquote><p>首先用计算器算出2^31=2147483648,最多也就10位，朴素的想法用一个一维数组从末尾开始存取数字，然后输出</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span> ans <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token number">1</span>x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">}</span>z <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>temp <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">}</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>z<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>z<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>ans <span class="token operator">+=</span> temp<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span>ans<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">pow</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> i2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>ret <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> i2 <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ret <span class="token operator">*=</span> ii2<span class="token operator">--</span><span class="token punctuation">}</span><span class="token keyword">return</span> ret<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123191049.png" style="zoom:50%;"><p>看了下官方题解，可以直接在弹出的过程中接入结果，期间进行判断是否越界，简洁而且内存消耗也少一点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rev <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> rev <span class="token operator">&lt;</span> math<span class="token punctuation">.</span>MinInt32<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span> rev <span class="token operator">&gt;</span> math<span class="token punctuation">.</span>MaxInt32<span class="token operator">/</span><span class="token number">10</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        digit <span class="token operator">:=</span> x <span class="token operator">%</span> <span class="token number">10</span>        x <span class="token operator">/=</span> <span class="token number">10</span>        rev <span class="token operator">=</span> rev<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> digit    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123191853.png" style="zoom:50%;"><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="1、最接近的三数之和"><a href="#1、最接近的三数之和" class="headerlink" title="1、最接近的三数之和"></a>1、最接近的三数之和</h2><blockquote><p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p><p>返回这三个数的和。</p><p>假定每组输入只存在恰好一个解。</p><p>示例 1：</p><p>输入：nums = [-1,2,1,-4], target = 1<br>输出：2<br>解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</p><p>示例 2：</p><p>输入：nums = [0,0,0], target = 1<br>输出：0</p><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 1000</li><li>-1000 &lt;= nums[i] &lt;= 1000</li><li>-104 &lt;= target &lt;= 104</li></ul></blockquote><p>拿到题目就想暴力是不是没救了₍ᐢ •͈ ༝ •͈ ᐢ₎♡</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>min<span class="token punctuation">,</span> he<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> k <span class="token operator">:=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>he <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> min <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> he<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> he<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123201300.png" style="zoom:50%;"><p>时间复杂度O(n^3)。看了官方题解，可以使用双指针，先将数组排序，然后固定一个数，另外两个数从剩下的头尾开始移动，时间复杂度为O(n2)</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>min<span class="token punctuation">,</span> he <span class="token operator">:=</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>l<span class="token punctuation">,</span> r <span class="token operator">:=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">{</span><span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>he <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span>l<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>he <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span>r<span class="token operator">--</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> target<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> he<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123211239.png" style="zoom:50%;"><p>实际上官方题解有额外的优化，就是移动双指针的时候跳过相同的元素，但是我用官方的解答反而比自己写的不带这种优化要慢许多，是大家都用官方代码的原因吗？我感觉确实比我的要高效。</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123211955.png" style="zoom:50%;"><p>尝试在自己的代码中加入优化。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>min<span class="token punctuation">,</span> he <span class="token operator">:=</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>l<span class="token punctuation">,</span> r <span class="token operator">:=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">{</span><span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>he <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> l <span class="token operator">&lt;</span> r<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>l<span class="token operator">++</span><span class="token punctuation">}</span>l<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>he <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> r <span class="token operator">&gt;</span> l<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>r<span class="token operator">--</span><span class="token punctuation">}</span>r<span class="token operator">--</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> target<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> he<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">JueDuiZhi</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现还是慢了。</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230123214810.png" style="zoom:50%;"><h1 id="深度优先算法"><a href="#深度优先算法" class="headerlink" title="深度优先算法"></a>深度优先算法</h1><h2 id="1、恢复二叉搜索树"><a href="#1、恢复二叉搜索树" class="headerlink" title="1、恢复二叉搜索树"></a>1、恢复二叉搜索树</h2><blockquote><p>给你二叉搜索树的根节点 root ，该树中的 恰好 两个节点的值被错误地交换。请在不改变其结构的情况下，恢复这棵树 。</p><p>示例 1：</p><p>输入：root = [1,3,null,null,2]<br>输出：[3,1,null,null,2]<br>解释：3 不能是 1 的左孩子，因为 3 &gt; 1 。交换 1 和 3 使二叉搜索树有效。<br>示例 2：</p><p>输入：root = [3,1,4,null,null,2]<br>输出：[2,1,4,null,null,3]<br>解释：2 不能在 3 的右子树中，因为 2 &lt; 3 。交换 2 和 3 使二叉搜索树有效。</p><p>提示：</p><ul><li><p>树上节点的数目在范围 [2, 1000] 内</p></li><li><p>-2^31 &lt;= Node.val &lt;= 2^31 - 1</p></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/recover-binary-search-tree">https://leetcode.cn/problems/recover-binary-search-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><p>树图方面的知识较为欠缺，要多做，这道题二叉搜索树是指右孩子&gt;父亲结点&gt;左孩子，所以中序遍历后的序列就是升序排列，可以根据这个特性来遍历中序遍历后的数组找到异常的位置，有两种情况，一种是交换的两个结点数值在数组中不相邻，一种是相邻的，根据两种情况找到相应的位置，然后遍历树的过程中交换。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//a用来存储中序遍历后的结点数值Val，b用来存储异常位置的序号，最多只有两处异常，所以长度只需要2即可</span>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//中序遍历</span><span class="token keyword">var</span> inorder <span class="token keyword">func</span><span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span>inorder <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> node<span class="token punctuation">.</span>Val<span class="token punctuation">)</span><span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>k <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//第一次出现异常的i肯定是异常的数，如果有第二次，那么异常的数应该是i+1，如果没有第二次，说明异常是相邻的</span><span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ik<span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment">//最多只有两次</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span>index1<span class="token punctuation">,</span> index2 <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>index1<span class="token punctuation">,</span> index2 <span class="token operator">=</span> a<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>index1<span class="token punctuation">,</span> index2 <span class="token operator">=</span> a<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">//找到异常数值就要遍历树进行修改，这里用k避免不必要的遍历</span><span class="token keyword">var</span> SwapIndex <span class="token keyword">func</span><span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2 <span class="token builtin">int</span><span class="token punctuation">)</span>SwapIndex <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> node<span class="token punctuation">.</span>Val <span class="token operator">==</span> i1 <span class="token punctuation">{</span>node<span class="token punctuation">.</span>Val <span class="token operator">=</span> i2k<span class="token operator">--</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>Val <span class="token operator">==</span> i2 <span class="token punctuation">{</span>node<span class="token punctuation">.</span>Val <span class="token operator">=</span> i1k<span class="token operator">--</span><span class="token punctuation">}</span><span class="token function">SwapIndex</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token function">SwapIndex</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">SwapIndex</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> index1<span class="token punctuation">,</span> index2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时空复杂度均为O(n)，官方解答给出了非递归中序遍历的mirrors中序遍历方法，可以将空间复杂度降到O(1)。可以多看看，感觉遇到题目的时候应该是想不到( ´•̥×•̥` )。</p><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="1、通配符匹配"><a href="#1、通配符匹配" class="headerlink" title="1、通配符匹配"></a>1、通配符匹配</h2><blockquote><p>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配。</p><p>‘?’ 可以匹配任何单个字符。<br>‘*’ 可以匹配任意字符串（包括空字符串）。<br>两个字符串完全匹配才算匹配成功。</p><p>说明:</p><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。</p><p>示例 1:</p><p>输入:<br>s = “aa”<br>p = “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。</p><p>示例 2:</p><p>输入:<br>s = “aa”<br>p = “<em>“<br>输出: true<br>解释: ‘</em>‘ 可以匹配任意字符串。<br>示例 3:</p><p>输入:<br>s = “cb”<br>p = “?a”<br>输出: false<br>解释: ‘?’ 可以匹配 ‘c’, 但第二个 ‘a’ 无法匹配 ‘b’。<br>示例 4:</p><p>输入:<br>s = “adceb”<br>p = “<em>a</em>b”<br>输出: true<br>解释: 第一个 ‘<em>‘ 可以匹配空字符串, 第二个 ‘</em>‘ 可以匹配字符串 “dce”.<br>示例 5:</p><p>输入:<br>s = “acdcb”<br>p = “a*c?b”<br>输出: false</p></blockquote><p>不会写。。。看题解吧</p><p>方法一，动态规划，用dp(i,j)来表示s的前i个字符和p的前j个字符匹配则当si==pj的时候只要dp(i-1,j-1)true即可，当pj为？时，则si一定与pj匹配，此时只需要看dp(i-1,j-1)即可，若pj为 *，则要分情况，使用该 * 去匹配或者不使用 * 匹配。不使用该 * 匹配时dp(i,j)=dp(i,j-1),因为此时 * 匹配0个字符，使用的时候dp(i,j)=dp(i-1,j),所以合起来就是dp(i,j)=dp(i,j-1)Vdp(i-1,j)</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230125203045.png" style="zoom:50%;"><p>接下来考虑边界情况，dp(i,0)为false,dp(0,j)仅当p全为 * 才成立。dp(0,0)为true。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> p <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2为贪心算法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> p <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">charMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            p <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    sIndex<span class="token punctuation">,</span> pIndex <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    sRecord<span class="token punctuation">,</span> pRecord <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> sIndex <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pRecord <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> p<span class="token punctuation">[</span>pIndex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token punctuation">{</span>            pIndex<span class="token operator">++</span>            sRecord<span class="token punctuation">,</span> pRecord <span class="token operator">=</span> sIndex<span class="token punctuation">,</span> pIndex        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">charMatch</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>sIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>pIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sIndex<span class="token operator">++</span>            pIndex<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sRecord <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> sRecord <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sRecord<span class="token operator">++</span>            sIndex<span class="token punctuation">,</span> pIndex <span class="token operator">=</span> sRecord<span class="token punctuation">,</span> pRecord        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">allStars</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> pIndex<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">allStars</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">charMatch</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> u <span class="token operator">==</span> v <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题应该反复琢磨<a href="https://leetcode.cn/problems/wildcard-matching/">https://leetcode.cn/problems/wildcard-matching/</a></p><h1 id="广度优先算法"><a href="#广度优先算法" class="headerlink" title="广度优先算法"></a>广度优先算法</h1><h2 id="1、单词接龙"><a href="#1、单词接龙" class="headerlink" title="1、单词接龙"></a>1、单词接龙</h2><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230126202010.png" style="zoom: 50%;"><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230126202127.png" style="zoom:50%;"><p>读懂题目之后想到可以用BFS剪枝来做。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>beginWord <span class="token builtin">string</span><span class="token punctuation">,</span> endWord <span class="token builtin">string</span><span class="token punctuation">,</span> wordList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> wordList <span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">//删去beginWord</span><span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> beginWord<span class="token punctuation">)</span><span class="token comment">//字典中不包含endWord说明一定转换不了</span><span class="token keyword">if</span> a<span class="token punctuation">[</span>endWord<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>queue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> beginWord<span class="token punctuation">)</span>k <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>str <span class="token operator">:=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>tmp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span><span class="token comment">//符合转换条件</span><span class="token keyword">if</span> <span class="token function">CanExchange</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> key <span class="token operator">==</span> endWord <span class="token punctuation">{</span><span class="token keyword">return</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> key<span class="token punctuation">)</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//tmp中的已经实验过了，所以从a中删去tmp的元素</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> tmp <span class="token punctuation">{</span><span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>k<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CanExchange</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>k<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>k<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">if</span> k <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是时间复杂度和空间复杂度太大，只能说做出来了，但是不是最优。</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127134909.png" style="zoom:50%;"><p>看官方题解，给了两种方法，一种是优化建图+BFS</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127141748.png" style="zoom:50%;"><p>虚拟结点可以有效优化我之前判断是否可以转换的函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>beginWord <span class="token builtin">string</span><span class="token punctuation">,</span> endWord <span class="token builtin">string</span><span class="token punctuation">,</span> wordList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>wordid <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>graph <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/*函数用来把word加进wordid中并且返回id。*/</span>addword <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> exist <span class="token operator">:=</span> wordid<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span>id <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>wordid<span class="token punctuation">)</span>wordid<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> idgraph <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> id<span class="token punctuation">}</span><span class="token comment">/*函数用来增加图的边*/</span>addedge <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>id1 <span class="token operator">:=</span> <span class="token function">addword</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token comment">//将string转换成[]byte可以修改string的值，用来增加虚拟结点</span>byteword <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> byteword <span class="token punctuation">{</span>byteword<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span>id2 <span class="token operator">:=</span> <span class="token function">addword</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//建立id1和id2的边</span>graph<span class="token punctuation">[</span>id1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>id1<span class="token punctuation">]</span><span class="token punctuation">,</span> id2<span class="token punctuation">)</span>graph<span class="token punctuation">[</span>id2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>id2<span class="token punctuation">]</span><span class="token punctuation">,</span> id1<span class="token punctuation">)</span><span class="token comment">//还原</span>byteword<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">}</span><span class="token keyword">return</span> id1<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> wordList <span class="token punctuation">{</span><span class="token function">addedge</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span>beginid <span class="token operator">:=</span> <span class="token function">addedge</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>endid<span class="token punctuation">,</span> exist <span class="token operator">:=</span> wordid<span class="token punctuation">[</span>endWord<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//path切片用来记录从起始id到各个id经过的步数，初始化除了beginid以外全为-1，暂时为不可达</span>path <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>wordid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>path<span class="token punctuation">[</span>beginid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>queue <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>beginid<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>strid <span class="token operator">:=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>queue <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">if</span> strid <span class="token operator">==</span> endid <span class="token punctuation">{</span><span class="token keyword">return</span> path<span class="token punctuation">[</span>strid<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> graph<span class="token punctuation">[</span>strid<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>strid<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二时双向BFS，即从beginid和endid同时开始搜索，如果在某一层两个搜索到同一个结点就可以停止搜索了，代码稍加改动。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span>beginWord <span class="token builtin">string</span><span class="token punctuation">,</span> endWord <span class="token builtin">string</span><span class="token punctuation">,</span> wordList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>wordid <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>graph <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/*函数用来把word加进wordid中并且返回id。*/</span>addword <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>id<span class="token punctuation">,</span> exist <span class="token operator">:=</span> wordid<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span>id <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>wordid<span class="token punctuation">)</span>wordid<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> idgraph <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> id<span class="token punctuation">}</span><span class="token comment">/*函数用来增加图的边*/</span>addedge <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>id1 <span class="token operator">:=</span> <span class="token function">addword</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token comment">//将string转换成[]byte可以修改string的值，用来增加虚拟结点</span>byteword <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> byteword <span class="token punctuation">{</span>byteword<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span>id2 <span class="token operator">:=</span> <span class="token function">addword</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//建立id1和id2的边</span>graph<span class="token punctuation">[</span>id1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>id1<span class="token punctuation">]</span><span class="token punctuation">,</span> id2<span class="token punctuation">)</span>graph<span class="token punctuation">[</span>id2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>id2<span class="token punctuation">]</span><span class="token punctuation">,</span> id1<span class="token punctuation">)</span><span class="token comment">//还原</span>byteword<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">}</span><span class="token keyword">return</span> id1<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> wordList <span class="token punctuation">{</span><span class="token function">addedge</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span>beginid <span class="token operator">:=</span> <span class="token function">addedge</span><span class="token punctuation">(</span>beginWord<span class="token punctuation">)</span>endid<span class="token punctuation">,</span> exist <span class="token operator">:=</span> wordid<span class="token punctuation">[</span>endWord<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">////path切片用来记录从起始id到各个id经过的步数，初始化除了beginid以外全为-1，暂时为不可达</span><span class="token comment">//path := make([]int, len(wordid))</span><span class="token comment">//for i := 0; i &lt; len(path); i++ {</span><span class="token comment">//path[i] = -1</span><span class="token comment">//}</span><span class="token comment">//path[beginid] = 0</span><span class="token comment">//</span><span class="token comment">//queue := []int{beginid}</span><span class="token comment">//for len(queue) != 0 {</span><span class="token comment">//strid := queue[0]</span><span class="token comment">//queue = queue[1:]</span><span class="token comment">//if strid == endid {</span><span class="token comment">//return path[strid]/2 + 1</span><span class="token comment">//}</span><span class="token comment">//for _, i := range graph[strid] {</span><span class="token comment">//if path[i] == -1 {</span><span class="token comment">//path[i] = path[strid] + 1</span><span class="token comment">//queue = append(queue, i)</span><span class="token comment">//}</span><span class="token comment">//}</span><span class="token comment">//}</span>pathbegin <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>wordid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> pathbegin <span class="token punctuation">{</span>pathbegin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>pathbegin<span class="token punctuation">[</span>beginid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>queuebegin <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>beginid<span class="token punctuation">}</span>pathend <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>wordid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> pathend <span class="token punctuation">{</span>pathend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>pathend<span class="token punctuation">[</span>endid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>queueend <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>endid<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>queuebegin<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>queueend<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>q <span class="token operator">:=</span> queuebeginqueuebegin <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> q <span class="token punctuation">{</span><span class="token keyword">if</span> pathend<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>pathend<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>pathbegin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> pathbegin<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>pathbegin<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> pathbegin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>queuebegin <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queuebegin<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>q <span class="token operator">=</span> queueendqueueend <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> q <span class="token punctuation">{</span><span class="token keyword">if</span> pathbegin<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>pathend<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>pathbegin<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> pathend<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>pathend<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> pathend<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>queueend <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>queueend<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127164732.png" style="zoom:50%;"><p>时间复杂度和空间复杂度为O(n*l^2)，n是Wordlist的长度，l是每个单词的长度。</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="1、从中序和后续遍历序列构造二叉树"><a href="#1、从中序和后续遍历序列构造二叉树" class="headerlink" title="1、从中序和后续遍历序列构造二叉树"></a>1、从中序和后续遍历序列构造二叉树</h2><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127165249.png" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127175236.png" style="zoom: 67%;"><p>后续遍历最后一个数就是根节点的val，然后在中序遍历序列中找到根节点的位置，左边为左子树，右边为右子树，假设左子树的长度为x,右子树的长度为y，则postorder[0:x]为左子树，postorder[x:x+y]，x+y=len(postorder)-1。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>inorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> postorder <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TreeNode <span class="token punctuation">{</span>index <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> inorder <span class="token punctuation">{</span>index<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">}</span><span class="token keyword">var</span> helper <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TreeNodehelper <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>inl<span class="token punctuation">,</span> inr <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>TreeNode <span class="token punctuation">{</span><span class="token keyword">if</span> inl <span class="token operator">&gt;</span> inr <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>val <span class="token operator">:=</span> postorder<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>postorder <span class="token operator">=</span> postorder<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>node <span class="token operator">:=</span> <span class="token operator">&amp;</span>TreeNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span> val<span class="token punctuation">}</span>id <span class="token operator">:=</span> index<span class="token punctuation">[</span>val<span class="token punctuation">]</span>node<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> inr<span class="token punctuation">)</span>node<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>inl<span class="token punctuation">,</span> id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> node<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方题解给了迭代的方法，学会了，下次也不会写ꐦ≖ ≖。</p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="1、搜索二维矩阵"><a href="#1、搜索二维矩阵" class="headerlink" title="1、搜索二维矩阵"></a>1、搜索二维矩阵</h2><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127183609.png" style="zoom:50%;"><p>终于有个题目简单点了(ˊo̴̶̷̤ ̫ o̴̶̷̤ˋ)，看完题目思路挺多，除去暴力法，首先，方法一可以把二维数组存到一个一维数组，按照顺序该一维数组是升序的，所以可以用二分查找来判断是否有该目标值。但是直观感觉时空复杂度很大。不过可以优化，不需要额外的空间，直接二分。方法二，最后一列为每一行的最大值，且是升序，可以先二分查找判断目标值属于哪一行，然后在该行继续二分查找。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">if</span> target <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> target <span class="token operator">&gt;</span> matrix<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>m<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> x <span class="token operator">&lt;=</span> d <span class="token punctuation">{</span><span class="token keyword">if</span> target <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>z<span class="token operator">/</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d <span class="token operator">=</span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> target <span class="token operator">&gt;</span> matrix<span class="token punctuation">[</span>z<span class="token operator">/</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d <span class="token operator">=</span> z<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>z<span class="token operator">+</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> d<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面为方法一，官方给的代码很简洁</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    m<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>m<span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> matrix<span class="token punctuation">[</span>i<span class="token operator">/</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i <span class="token operator">&lt;</span> m<span class="token operator">*</span>n <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>i<span class="token operator">/</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">}</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token punctuation">.</span>cn<span class="token operator">/</span>problems<span class="token operator">/</span>search<span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">2</span>d<span class="token operator">-</span>matrix<span class="token operator">/</span>solution<span class="token operator">/</span>sou<span class="token operator">-</span>suo<span class="token operator">-</span>er<span class="token operator">-</span>wei<span class="token operator">-</span>ju<span class="token operator">-</span>zhen<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solut<span class="token operator">-</span>vxui<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    row <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    col <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">SearchInts</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">return</span> col <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">}</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token punctuation">.</span>cn<span class="token operator">/</span>problems<span class="token operator">/</span>search<span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">2</span>d<span class="token operator">-</span>matrix<span class="token operator">/</span>solution<span class="token operator">/</span>sou<span class="token operator">-</span>suo<span class="token operator">-</span>er<span class="token operator">-</span>wei<span class="token operator">-</span>ju<span class="token operator">-</span>zhen<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solut<span class="token operator">-</span>vxui<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="1、行程和用户"><a href="#1、行程和用户" class="headerlink" title="1、行程和用户"></a>1、行程和用户</h2><blockquote><p>题目：<a href="https://leetcode.cn/problems/trips-and-users/">https://leetcode.cn/problems/trips-and-users/</a></p></blockquote><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h2 id="1、有效的数独"><a href="#1、有效的数独" class="headerlink" title="1、有效的数独"></a>1、有效的数独</h2><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/20230127201332.png" style="zoom:50%;"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rows<span class="token punctuation">,</span> columns <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> subboxes <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> board <span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> row <span class="token punctuation">{</span>            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            index <span class="token operator">:=</span> c <span class="token operator">-</span> <span class="token string">'1'</span>            rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span>            columns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span>            subboxes<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span>            <span class="token keyword">if</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> columns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> subboxes<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时空复杂度为O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结&amp;&amp;2023展望</title>
      <link href="posts/f096ae0d.html"/>
      <url>posts/f096ae0d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022过去，过去的一年发生了很多事情，不知道什么时候我也开始惆怅未来了，基于此，我想郑重的给自己定下2023的目标，并且未来会不时回顾</p></blockquote><h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><p>2022有很多值得回味的事情，也经历了很多挫折和打击。这里也只敢写给自己看，害。</p><p>大事回顾：</p><ul><li><p>和爸妈关于考研还是工作的争吵，一度连年都没过好</p></li><li><p>3,4月找实习感受到了寒意，有点动摇找工作的决心</p></li><li><p>7月开始暑假，武汉暴热，没有回家</p></li><li><p>9月考研报名科软</p></li><li><p>一直开摆到11月</p></li><li><p>12月考完研感觉希望不大了，但是也是一种解脱，今年可能诸事不顺，总有种水逆之感</p></li></ul><p>反思，很多事情，都是自己的懒惰造成的，回到家发现自己的父母这一年一直在辛苦的工作，我觉得我既然已经成年，就不能把父母的付出当成理所当然。</p><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><p>2022年底完全放开，2023应该不需要在口罩下度过了，我的校园生涯应该也只剩下半年了，如果考上研究生，那我就去读研，并且打算一直读到博士，然后在家乡这边找个大学任教，图个稳定，今年见证了互联网的动荡，如果可能，真的不想本科就去就业了，未来的生活真的一眼望到头。之前2021对2022的展望简直一团糟，我的2022也过的十分挫折，现在，给自己的2023定下目标。</p><ul><li><p>减肥，全年减肥50斤，回到130斤的范围，并且健身，每天只要是不下雨下雪就去跑2km</p></li><li><p>多喝牛奶，少出牛奶，这一年回归正常生活，不再幻想，为时不晚</p></li><li><p>找到工作</p></li><li><p>扔掉刘娇娇的东西，也扔掉过去，逃避解决不了问题</p></li><li><p>交朋友，学会分享，开始一段恋情</p></li><li><p>遇到事情，第一件事不是去抱怨</p></li><li><p>读两本文学书籍</p></li></ul><p>2023加油</p>]]></content>
      
      
      <categories>
          
          <category> 心事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结&amp;&amp;2022展望</title>
      <link href="posts/630c13ea.html"/>
      <url>posts/630c13ea.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>边看春晚边写回忆，这是我第一次写博客来回忆过去一年，以前也会在除夕夜回想这一年的所做所为。但是时间过得太久，忘记的差不多了。所以今年用文字记录下来</p></blockquote><h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><p>时间太久，感觉快忘了2021发生了什么了，尽力回忆中…</p><h2 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h2><p>2021感情上的最大的改变应该就是彻底和ljj断绝了联系，也是彻底和过去的自己告别，自从19年提出分手以后还是有所联系，我觉得很难受，她的那种强势令我觉得窒息，两个世界的人不应该有所交集，否则是一种痛苦，只不过我是以短痛断绝了长痛，她送给我了很多东西，也寄存在我这里很多东西，这时候想起来不知道咋还给她，也许她也不想要了吧，我也用不了</p><p>从大二开始暗恋了sq，但是感觉自己配不上她，不去打扰，静静的看着她就好。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年从大二到大三，我也搬进了基地，从这里我开始了自己的第一次做饭，可惜没有炒菜锅，不能炒菜，只能煮和蒸东西吃，不过还是很满足了，以后自己去工作了也可以自给自足，现在感觉以前稍微有所畏惧的煤气也没那么可怕，成长还是很明显的，自己还是很满意的。</p><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>这学期开始自己也准备去找工作了，自己规划自己的人生，虽然家庭里面希望我考研的人数占了大多数，指的是除了我和我姐，全部都劝我去考研，这也确实是我们这个十八线小县城的传统观念，认为学历就是全部，而且还说的很冠冕堂皇，可是他们连现实都不了解张口就来现在出来工作最多就年薪20w，但是读研出来就是年薪百万，很无语，说的是我的一个亲戚，真不明白，怎么敢的啊，研究生拿白菜档的比比皆是，我不想去混这三年，我想去真实的工作，增长工作的阅历，我自己的人生还是希望自己去掌握。</p><h2 id="性格"><a href="#性格" class="headerlink" title="性格"></a>性格</h2><p>这一年应该没啥大的改变，只是更加沉默了，不想去和人打交道，但是也能去应付一些必要的饭局和人际关系。也不会那么害羞。</p><p>感觉没啥好说的，或许是太多的事情我记不清了，这一年365天发生了太多的事情。</p><h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><p>愿今年能找到好的实习并且能在秋招中拿到满意的offer，我想自食其力，实现经济独立，并且也能去照顾我的家人，在生活上照顾好自己，在感情上一如既往的保持单身，在性格上能变得开朗一些，祝福自己未来的每一年，每一天都能活的轻松一点。</p>]]></content>
      
      
      <categories>
          
          <category> 心事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池Druid学习笔记</title>
      <link href="posts/47b02075.html"/>
      <url>posts/47b02075.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于为什么使用连接池</p><p>如果只是一般的JDBC进行连接的话，不同的应用进程进行申请的时候，需要重复的进行TCP连接，效率低下，而连接池就是预先申请一堆的长连接，需要的时候直接调用，并且会判断使用情况对其进行自动回收，防止连接池无连接可用。</p></blockquote><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>数据库连接池是一个容器，负责分配、管理数据库连接，允许应用程序使用一个现有的数据库连接，而不是重新建立连接</li><li>释放空闲时间超过最大的空闲时间的数据库连接，避免因为没有释放数据库连接而引发的数据库连接遗漏</li><li>可以实现资源重用</li><li>提升系统的响应速度</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>标准接口：DataSource</p><p>方法：getConnection（）</p><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul><p>本文介绍Druid的使用方法</p><p>使用步骤</p><ol><li><p>导入jar包</p><blockquote><p>可以去官方下载<a href="https://repo1.maven.org/maven2/com/alibaba/druid/">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p></blockquote></li><li><p>定义配置文件</p><p>在模块在编写一个配置文件，后缀名为properties，关于配置文件各参数的详情如下表</p><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。  如果没有配置，将会生成一个名字，格式是：”DataSource-“ + System.identityHashCode(this)</td></tr><tr><td>jdbcUrl</td><td></td><td>连接数据库的url，不同数据库不一样。例如：  mysql : jdbc:mysql://10.20.153.104:3306/druid2  oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义：  1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：  监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table></li><li><p>加载配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"配置文件的路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取连接池对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataSource</span> ds<span class="token operator">=</span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据库连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn<span class="token operator">=</span>ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>后续的使用和jdbc获取连接之后使用一致</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 工作准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易数据库管理系统</title>
      <link href="posts/fc319166.html"/>
      <url>posts/fc319166.html</url>
      
        <content type="html"><![CDATA[<h1 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h1><p>项目地址：<a href="https://github.com/fx-zpy/HUST-DatabaseExperiment">HUST-DatabaseExperiment</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据任务书里面的六个点我分成了10个功能来实现，后面由于Navicat和IDEA查看更改刷新费事，就又增加了3个辅助功能，查看三个表的信息。</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/dbmenu.png" style="zoom:50%;"><h2 id="关于jdbc连接mysql"><a href="#关于jdbc连接mysql" class="headerlink" title="关于jdbc连接mysql"></a>关于jdbc连接mysql</h2><blockquote><p>这里我是参考的菜鸟教程：<a href="https://www.runoob.com/java/java-mysql-connect.html">java Mysql 连接</a></p></blockquote><p>使用的时候需要导入驱动包，对于MySQL的版本在8.0以上的系统，加载驱动和数据库的URL如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/你的数据库名称?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是在8.0以下，使用如下形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DB_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/你的数据库名称"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来设置用户名和密码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">//这里为mysql注册的时候的用户名，一般都是root</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASS <span class="token operator">=</span> <span class="token string">"**********"</span><span class="token punctuation">;</span><span class="token comment">//这里修改为你mysql数据库的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在代码中使用的时候需要注册jdbc驱动然后连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注册 JDBC 驱动</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件详情"><a href="#文件详情" class="headerlink" title="文件详情"></a>文件详情</h2><p>dbmain.class:主函数实现</p><p>student.class:定义学生类</p><p>mysql_connect.class：连接mysql和其他功能的实现</p><p>mysql数据库：三个表</p><ul><li>student：学生信息表，包含学号，姓名，性别，年龄，院系，是否获得过奖学金</li><li>sc:成绩表,包含学号，课程号，成绩</li><li>course:课程表，包含课程号，课程名称，现行课，学分</li></ul><h2 id="初始化连接数据库"><a href="#初始化连接数据库" class="headerlink" title="初始化连接数据库"></a>初始化连接数据库</h2><p>这里在mysql_connect中将连接定义成方法，在主函数中调用进行连接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">MysqlConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1号功能"><a href="#1号功能" class="headerlink" title="1号功能"></a>1号功能</h2><p>插入学生信息，基于sql语句：<code>insert into student values(Sno,Sname,Ssex,Sage,Sdept,Scholarship);</code></p><p>需要用户输入相应的信息，由于信息是外输入的，一开始不能写入sql语句中，所以采用？后期来填补参数的方式来进行预处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into student values(?,?,?,?,?,?)"</span><span class="token punctuation">;</span><span class="token comment">//sql语句</span><span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预处理</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Sno</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入参数</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">Sname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">Ssex</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token class-name">Sage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">Sdept</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token class-name">Scholarship</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行返回更新的数目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2号功能"><a href="#2号功能" class="headerlink" title="2号功能"></a>2号功能</h2><p>修改学生数据，这里学号是唯一标识一个学生的数据，所以不提供修改，不过也可以进行修改，只不过比较麻烦，我也不想多写那么多功能了，没有时间啊(ノへ￣、)，基于sql语句:<code>update student set Sname=Sname,Ssex=Ssex,Sage=Sage,Sdept=Sdept,Scholarship=Scholarship where Sno=Sno;</code>这里问问增加了选择，一次只能修改一个数据，避免因为想修改一个数据而需要把全部信息输的麻烦</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入修改的数据序号(1:姓名2:性别3:年龄4:院系5:奖学金)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3号功能"><a href="#3号功能" class="headerlink" title="3号功能"></a>3号功能</h2><p>增加课程信息，和1号差不多，基于sql语句:<code>insert into course values(Cno,Cname,Cpno,Ccredit);</code></p><h2 id="4号功能"><a href="#4号功能" class="headerlink" title="4号功能"></a>4号功能</h2><p>修改课程信息，和2号差不多，基于sql语句：<code>update course set Cname=Cname,Cpno=Cpno,Ccredit=Ccredit where Cno=Cno;</code></p><h2 id="5号功能"><a href="#5号功能" class="headerlink" title="5号功能"></a>5号功能</h2><p>删除没有人选课的课程，这里基于sql语句：<code>delete from course where Cno not in (select distinct Cno from sc);</code></p><p>但是执行错误，我检查了一下sql语句发现没错，查看报错信息是外键约束，这是当初建立表的时候设定的，想要删除有两种方法，取消外键和取消外键约束检查，我选择使用后者，在删除执行前禁用约束检查，在删除后再恢复约束检查。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token comment">//禁用外键约束检查</span><span class="token keyword">set</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//启用外键约束检查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6号功能"><a href="#6号功能" class="headerlink" title="6号功能"></a>6号功能</h2><p>录入学生成绩，基于sql语句：<code>insert into sc values(Sno,Cno,Grade);</code>和1类似</p><h2 id="7号功能"><a href="#7号功能" class="headerlink" title="7号功能"></a>7号功能</h2><p>修改学生成绩，基于sql语句:<code>update sc set Grade=Grade where Sno=Sno and Cno=Cno;</code>和2类似</p><h2 id="8号功能"><a href="#8号功能" class="headerlink" title="8号功能"></a>8号功能</h2><p>按照院系统计学生的成绩，包含最高分，最低分，平均分，优秀率和不及格人数，这里最高分，最低分和平均分可以通过sql语句<code>select Sdept, avg(Grade) avgGrade, max(Grade) maxGrade, min(Grade) minGrade from (select Sdept, Grade from Student, SC where Student.Sno = SC.Sno) as deptGrade(Sdept, Grade) group by Sdept</code>来查询，后面优秀率是通过查询总人数<code>select count(*) as count from sc, student where student.Sdept = ? and student.Sno = sc.Sno</code>和优秀人数<code>select count(*) as count  from sc, student where student.Sdept = ? and student.Sno = sc.Sno and sc.Grade &gt;= 80</code>，两者相除得到的，而不及格人数可以直接利用sql语句查询获取<code>select count(*) as count  from sc, student where student.Sdept = ? and student.Sno = sc.Sno and sc.Grade &lt;= 60</code></p><h2 id="9号功能"><a href="#9号功能" class="headerlink" title="9号功能"></a>9号功能</h2><p>按系进行排名，同时显示出学生、课程和成绩信息，这里首先需要建立一个学生类的列表，在获取数据循环中将每个学生的信息加入进去，然后利用Collections.sort进行排序重写方法使用Lambda表达式直接简化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/db9hao.png" style="zoom:50%;"><h2 id="10号功能"><a href="#10号功能" class="headerlink" title="10号功能"></a>10号功能</h2><p>由学号得信息，这里输入学号之后基于学号去student,sc,course表中查询信息就行了</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/db10.png" style="zoom:50%;"><h2 id="11、12、13号功能"><a href="#11、12、13号功能" class="headerlink" title="11、12、13号功能"></a>11、12、13号功能</h2><p>查看表信息，比较简单，直接使用sql语句：<code>select * from student\sc\course;</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++知识总结</title>
      <link href="posts/bbf4e5b.html"/>
      <url>posts/bbf4e5b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文来源于<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">C++ 教程 | 菜鸟教程 (runoob.com)</a>，由于C++和C有很多的重合点，所以本文仅记录两者不同点或者C++中比较重要的点</p></blockquote><h1 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C++基础知识"></a>C++基础知识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>类：类可以定义为描述对象行为/状态的模板/蓝图</p></li><li><p>对象：对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例</p></li><li><p>方法：从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作</p></li><li><p>即时变量：每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的</p></li><li><p><code>using namespace std</code>:告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念</p></li><li><p><strong>C++区分大小写</strong></p></li><li><p>C++关键字<a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</a></p></li><li><p>wchar_t:宽字符型（来源于typedef short int wchar_t,就是把short int命名为wchar_t）</p><table><thead><tr><th align="left">类型</th><th align="left">位</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 个字节</td><td align="left">-128 到 127 或者 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 个字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 个字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647</td></tr><tr><td align="left">unsigned int</td><td align="left">4 个字节</td><td align="left">0 到 4294967295</td></tr><tr><td align="left">signed int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647</td></tr><tr><td align="left">short int</td><td align="left">2 个字节</td><td align="left">-32768 到 32767</td></tr><tr><td align="left">unsigned short int</td><td align="left">2 个字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">signed short int</td><td align="left">2 个字节</td><td align="left">-32768 到 32767</td></tr><tr><td align="left">long int</td><td align="left">8 个字节</td><td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td align="left">signed long int</td><td align="left">8 个字节</td><td align="left">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td align="left">unsigned long int</td><td align="left">8 个字节</td><td align="left">0 到 18,446,744,073,709,551,615</td></tr><tr><td align="left">float</td><td align="left">4 个字节</td><td align="left">精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td></tr><tr><td align="left">double</td><td align="left">8 个字节</td><td align="left">双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td></tr><tr><td align="left">long double</td><td align="left">16 个字节</td><td align="left">长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。</td></tr><tr><td align="left">wchar_t</td><td align="left">2 或 4 个字节</td><td align="left">1 个宽字符</td></tr></tbody></table></li><li><p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L’x’），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 ‘x’），此时它可以存储在 <strong>char</strong> 类型的简单变量中</p><table><thead><tr><th align="left">转义序列</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">\ 字符</td></tr><tr><td align="left">'</td><td align="left">‘ 字符</td></tr><tr><td align="left">"</td><td align="left">“ 字符</td></tr><tr><td align="left">?</td><td align="left">? 字符</td></tr><tr><td align="left">\a</td><td align="left">警报铃声</td></tr><tr><td align="left">\b</td><td align="left">退格键</td></tr><tr><td align="left">\f</td><td align="left">换页符</td></tr><tr><td align="left">\n</td><td align="left">换行符</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\t</td><td align="left">水平制表符</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符</td></tr><tr><td align="left">\ooo</td><td align="left">一到三位的八进制数</td></tr><tr><td align="left">\xhh . . .</td><td align="left">一个或多个数字的十六进制数</td></tr></tbody></table></li><li><p>类型限定符限制的变量的特性</p><p><code>const</code>:const 类型的对象在程序执行期间不能被修改改变</p><p><code>volatile</code>:修饰符 volatile 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率</p><p><code>restrict</code>:由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict</p></li><li><p>存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前(auto自从C++17开始就不再是存储类，register被弃用)</p><ul><li><code>static</code>：static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享</li><li><code>extern</code>:extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候</li><li><code>mutable</code>:mutable 说明符仅适用于类的对象,它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改</li><li><code>thread_local</code>:使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。thread_local 说明符可以与 static 或 extern 合并。可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义</li></ul></li><li><p>运算符的优先级</p><table><thead><tr><th align="left">类别</th><th align="left">运算符</th><th align="left">结合性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] -&gt; . ++ - -</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">+ - ! ~ ++ - - (type)* &amp; sizeof</td><td align="left">从右到左</td></tr><tr><td align="left">乘除</td><td align="left">* / %</td><td align="left">从左到右</td></tr><tr><td align="left">加减</td><td align="left">+ -</td><td align="left">从左到右</td></tr><tr><td align="left">移位</td><td align="left">&lt;&lt; &gt;&gt;</td><td align="left">从左到右</td></tr><tr><td align="left">关系</td><td align="left">&lt; &lt;= &gt; &gt;=</td><td align="left">从左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">从左到右</td></tr><tr><td align="left">位与 AND</td><td align="left">&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">位异或 XOR</td><td align="left">^</td><td align="left">从左到右</td></tr><tr><td align="left">位或 OR</td><td align="left">|</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑与 AND</td><td align="left">&amp;&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑或 OR</td><td align="left">||</td><td align="left">从左到右</td></tr><tr><td align="left">条件</td><td align="left">?:</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">,</td><td align="left">从左到右</td></tr></tbody></table></li><li><p>Lambda表达式：Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。Lambda 表达式本质上与函数声明非常类似</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">基本形式[capture](parameters)-&gt;return-type{body}例如[](int x, int y){ return x &lt; y ; }没有返回值的时候[capture](parameters){body}例如[]{ ++global_x; } -------------------------------------------------------------------------在Lambda表达式内可以访问当前作用域的变量，需要引用的时候通过前面的[capture]来调用，下面是各种引用的区别[]      // 没有定义任何变量。使用未定义变量会引发错误。[x, &amp;y] // x以传值方式传入（默认），y以引用方式传入。[&amp;]     // 任何被使用到的外部变量都隐式地以引用方式加以引用。[=]     // 任何被使用到的外部变量都隐式地以传值方式加以引用。[&amp;, x]  // x显式地以传值方式加以引用。其余变量以引用方式加以引用。[=, &amp;z] // z显式地以引用方式加以引用。其余变量以传值方式加以引用。另外有一点需要注意。对于[=]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入[this]() { this-&gt;someFunc(); }();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数学运算：使用需要包含函数头文件<cmath>，以下为一些常用的函数</cmath></p><table><thead><tr><th align="left">序号</th><th align="left">函数 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>double cos(double);</strong> 该函数返回弧度角（double 型）的余弦。</td></tr><tr><td align="left">2</td><td align="left"><strong>double sin(double);</strong> 该函数返回弧度角（double 型）的正弦。</td></tr><tr><td align="left">3</td><td align="left"><strong>double tan(double);</strong> 该函数返回弧度角（double 型）的正切。</td></tr><tr><td align="left">4</td><td align="left"><strong>double log(double);</strong> 该函数返回参数的自然对数。</td></tr><tr><td align="left">5</td><td align="left"><strong>double pow(double, double);</strong> 假设第一个参数为 x，第二个参数为 y，则该函数返回 x 的 y 次方。</td></tr><tr><td align="left">6</td><td align="left"><strong>double hypot(double, double);</strong> 该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度。</td></tr><tr><td align="left">7</td><td align="left"><strong>double sqrt(double);</strong> 该函数返回参数的平方根。</td></tr><tr><td align="left">8</td><td align="left"><strong>int abs(int);</strong> 该函数返回整数的绝对值。</td></tr><tr><td align="left">9</td><td align="left"><strong>double fabs(double);</strong> 该函数返回任意一个浮点数的绝对值。</td></tr><tr><td align="left">10</td><td align="left"><strong>double floor(double);</strong> 该函数返回一个小于或等于传入参数的最大整数。</td></tr></tbody></table></li><li><p>随机数生成</p><p>rand()生成的是伪随机数，虽然随机但是有规律可寻，但是使用srand()先设置种子就能真的随机，这个种子一般是时间，例如设置种子<code>srand( (unsigned)time( NULL ) )</code>，</p></li><li><p>setw()：<a href="https://www.runoob.com/w3cnote/cpp-func-setw.html">C++ setw() 函数 | 菜鸟教程 (runoob.com)</a></p></li><li><p>引用：引用变量是一个别名，它是某一个已经存在的变量的另一个名字，一旦把引用初始化为某个变量，就可以使用该引用名称或者变量名来指向变量</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int&amp;  r = i;double&amp; s = d;在这些声明中，&amp; 读作引用。因此，第一个声明可以读作 "r 是一个初始化为 i 的整型引用"，第二个声明可以读作 "s 是一个初始化为 d 的 double 型引用"-------------------------------------------------------------------------示例程序#include &lt;iostream&gt; using namespace std; int main (){   // 声明简单的变量   int    i;   double d;    // 声明引用变量   int&amp;    r = i;   double&amp; s = d;      i = 5;   cout &lt;&lt; "Value of i : " &lt;&lt; i &lt;&lt; endl;   cout &lt;&lt; "Value of i reference : " &lt;&lt; r  &lt;&lt; endl;    d = 11.7;   cout &lt;&lt; "Value of d : " &lt;&lt; d &lt;&lt; endl;   cout &lt;&lt; "Value of d reference : " &lt;&lt; s  &lt;&lt; endl;      return 0;}-------------------------------------------------------------------------程序运行结果Value of i : 5Value of i reference : 5Value of d : 11.7Value of d reference : 11.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化</li></ul></blockquote><ul><li><p>日期和时间：使用需要包含头文件<ctime></ctime></p><p>有四个与时间相关的类型：<strong>clock_t、time_t、size_t</strong> 和 <strong>tm</strong>。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。结构类型 <strong>tm</strong> 把日期和时间以 C 结构的形式保存</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct tm {  int tm_sec;   // 秒，正常范围从 0 到 59，但允许至 61  int tm_min;   // 分，范围从 0 到 59  int tm_hour;  // 小时，范围从 0 到 23  int tm_mday;  // 一月中的第几天，范围从 1 到 31  int tm_mon;   // 月，范围从 0 到 11  int tm_year;  // 自 1900 年起的年数  int tm_wday;  // 一周中的第几天，范围从 0 到 6，从星期日算起  int tm_yday;  // 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起  int tm_isdst; // 夏令时};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">序号</th><th align="left">函数 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-time.html"><strong>time_t time(time_t *time);</strong></a> 该函数返回系统的当前日历时间，自 1970 年 1 月 1 日以来经过的秒数。如果系统没有时间，则返回 -1。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-ctime.html"><strong>char *ctime(const time_t *time);</strong></a> 该返回一个表示当地时间的字符串指针，字符串形式 <em>day month year hours:minutes:seconds year\n\0</em>。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-localtime.html"><strong>struct tm *localtime(const time_t *time);</strong></a> 该函数返回一个指向表示本地时间的 <strong>tm</strong> 结构的指针。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-clock.html"><strong>clock_t clock(void);</strong></a> 该函数返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。如果时间不可用，则返回 -1。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-asctime.html"><strong>char * asctime ( const struct tm * time );</strong></a> 该函数返回一个指向字符串的指针，字符串包含了 time 所指向结构中存储的信息，返回形式为：day month date hours:minutes:seconds year\n\0。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-gmtime.html"><strong>struct tm *gmtime(const time_t *time);</strong></a> 该函数返回一个指向 time 的指针，time 为 tm 结构，用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-mktime.html"><strong>time_t mktime(struct tm *time);</strong></a> 该函数返回日历时间，相当于 time 所指向结构中存储的时间。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-difftime.html"><strong>double difftime ( time_t time2, time_t time1 );</strong></a> 该函数返回 time1 和 time2 之间相差的秒数。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/cplusplus/c-function-strftime.html"><strong>size_t strftime();</strong></a> 该函数可用于格式化日期和时间为指定的格式。</td></tr></tbody></table></li><li><p>基本输入输出</p><blockquote><p><a href="https://www.runoob.com/cplusplus/cpp-basic-input-output.html">C++ 基本的输入输出 | 菜鸟教程 (runoob.com)</a>有两篇笔记值得一看</p></blockquote><ul><li><p>重要I/O库头文件</p><table><thead><tr><th align="left">头文件</th><th align="left">函数和描述</th></tr></thead><tbody><tr><td align="left"><iostream></iostream></td><td align="left">该文件定义了 <strong>cin、cout、cerr</strong> 和 <strong>clog</strong> 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td></tr><tr><td align="left"><iomanip></iomanip></td><td align="left">该文件通过所谓的参数化的流操纵器（比如 <strong>setw</strong> 和 <strong>setprecision</strong>），来声明对执行标准化 I/O 有用的服务。</td></tr><tr><td align="left"><fstream></fstream></td><td align="left">该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td></tr></tbody></table></li><li><p>标准输入输出流</p><ul><li><p>输出：预定义的对象 <strong>cout</strong> 是 <strong>iostream</strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong>cout</strong> 是与流插入运算符 &lt;&lt; 结合使用的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; int main( ){   char str[] = "Hello C++";    cout &lt;&lt; "Value of str is : " &lt;&lt; str &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。&lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<strong>endl</strong> 用于在行末添加一个换行符，也可以替换成”\n”</p></li><li><p>输入：预定义的对象 <strong>cin</strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong>cin</strong> 是与流提取运算符 &gt;&gt; 结合使用的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; int main( ){   char name[50];    cout &lt;&lt; "请输入您的名称： ";   cin &gt;&gt; name;   cout &lt;&lt; "您的名称是： " &lt;&lt; name &lt;&lt; endl; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。流提取运算符 &gt;&gt; 在一个语句中可以多次使用，如果要求输入多个数据,例如<code>cin &gt;&gt; name &gt;&gt; age;</code></p></li></ul></li><li><p>标准错误流：预定义的对象 <strong>cerr</strong> 是 <strong>iostream</strong> 类的一个实例。cerr 对象附属到标准错误设备，通常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。<strong>cerr</strong> 也是与流插入运算符 &lt;&lt; 结合使用的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; int main( ){   char str[] = "Unable to read....";    cerr &lt;&lt; "Error message : " &lt;&lt; str &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质上和cout差不多</p></li><li><p>标准日志流：预定义的对象 <strong>clog</strong> 是 <strong>iostream</strong> 类的一个实例。clog 对象附属到标准错误设备，通常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区，直到缓冲填满或者缓冲区刷新时才会输出。<strong>clog</strong> 也是与流插入运算符 &lt;&lt; 结合使用的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; int main( ){   char str[] = "Unable to read....";    clog &lt;&lt; "Error message : " &lt;&lt; str &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和cin差不多</p><blockquote><p>在小示例中无法区分 cout、cerr 和 clog 的差异，但在编写和执行大型程序时，它们之间的差异就变得非常明显。所以良好的编程实践告诉我们，使用 cerr 流来显示错误消息，而其他的日志消息则使用 clog 流来输出</p></blockquote></li></ul></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li><p>类和对象</p><ul><li><p>定义：C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的成员。函数在一个类中被称为类的成员，定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/c++lei.png" style="zoom:80%;"><p>示例</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; class Box{   public:      double length;   // 长度      double breadth;  // 宽度      double height;   // 高度      // 成员函数声明      double get(void);      void set( double len, double bre, double hei );};// 成员函数定义double Box::get(void){    return length * breadth * height;} void Box::set( double len, double bre, double hei){    length = len;    breadth = bre;    height = hei;}int main( ){   Box Box1;        // 声明 Box1，类型为 Box   Box Box2;        // 声明 Box2，类型为 Box   Box Box3;        // 声明 Box3，类型为 Box   double volume = 0.0;     // 用于存储体积    // box 1 详述   Box1.height = 5.0;    Box1.length = 6.0;    Box1.breadth = 7.0;    // box 2 详述   Box2.height = 10.0;   Box2.length = 12.0;   Box2.breadth = 13.0;    // box 1 的体积   volume = Box1.height * Box1.length * Box1.breadth;   cout &lt;&lt; "Box1 的体积：" &lt;&lt; volume &lt;&lt;endl;    // box 2 的体积   volume = Box2.height * Box2.length * Box2.breadth;   cout &lt;&lt; "Box2 的体积：" &lt;&lt; volume &lt;&lt;endl;     // box 3 详述   Box3.set(16.0, 8.0, 12.0);    volume = Box3.get();    cout &lt;&lt; "Box3 的体积：" &lt;&lt; volume &lt;&lt;endl;   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>详解</p><table><thead><tr><th align="left">概念</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-class-member-functions.html">类成员函数</a></td><td align="left">类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-class-access-modifiers.html">类访问修饰符</a></td><td align="left">类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-constructor-destructor.html">构造函数 &amp; 析构函数</a></td><td align="left">类的构造函数是一种特殊的函数，在创建一个新的对象时调用。类的析构函数也是一种特殊的函数，在删除所创建的对象时调用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-copy-constructor.html">C++ 拷贝构造函数</a></td><td align="left">拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-friend-functions.html">C++ 友元函数</a></td><td align="left"><strong>友元函数</strong>可以访问类的 private 和 protected 成员。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-inline-functions.html">C++ 内联函数</a></td><td align="left">通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-this-pointer.html">C++ 中的 this 指针</a></td><td align="left">每个对象都有一个特殊的指针 <strong>this</strong>，它指向对象本身。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-to-class.html">C++ 中指向类的指针</a></td><td align="left">指向类的指针方式如同指向结构的指针。实际上，类可以看成是一个带有函数的结构。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-static-members.html">C++ 类的静态成员</a></td><td align="left">类的数据成员和函数成员都可以被声明为静态的。</td></tr></tbody></table></li></ul></li><li><p>继承</p><ul><li><p>定义：面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为<strong>基类</strong>，新建的类称为<strong>派生类</strong></p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/c++jicheng.png" style="zoom:80%;"><p>例如</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// 基类class Animal {    // eat() 函数    // sleep() 函数};//派生类class Dog : public Animal {    // bark() 函数};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里派生类或者其他语言里面叫子类继承基类或者其他语言里面的父类所用的方式是<code>class 派生类：访问修饰符 基类</code>，访问修饰符是 public、protected 或 private 其中的一个，如果未定义，则默认是private</p><table><thead><tr><th align="left">访问</th><th align="left">public</th><th align="left">protected</th><th align="left">private</th></tr></thead><tbody><tr><td align="left">同一个类</td><td align="left">yes</td><td align="left">yes</td><td align="left">yes</td></tr><tr><td align="left">派生类</td><td align="left">yes</td><td align="left">yes</td><td align="left">no</td></tr><tr><td align="left">外部的类</td><td align="left">yes</td><td align="left">no</td><td align="left">no</td></tr></tbody></table><blockquote><p>派生类可以继承基类的所有方法但是不包括以下几点</p><ul><li>基类的构造函数、析构函数和拷贝构造函数</li><li>基类的重载运算符</li><li>基类的友元函数</li></ul></blockquote></li><li><p>多继承</p><p>一个子类可以有多个父类，继承多个父类的特性</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class &lt;派生类名&gt;:&lt;继承方式1&gt;&lt;基类名1&gt;,&lt;继承方式2&gt;&lt;基类名2&gt;,…{&lt;派生类类体&gt;};---------------------------------------------------------------------例如#include &lt;iostream&gt; using namespace std; // 基类 Shapeclass Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;}; // 基类 PaintCostclass PaintCost {   public:      int getCost(int area)      {         return area * 70;      }}; // 派生类class Rectangle: public Shape, public PaintCost{   public:      int getArea()      {          return (width * height);       }}; int main(void){   Rectangle Rect;   int area;    Rect.setWidth(5);   Rect.setHeight(7);    area = Rect.getArea();      // 输出对象的面积   cout &lt;&lt; "Total area: " &lt;&lt; Rect.getArea() &lt;&lt; endl;    // 输出总花费   cout &lt;&lt; "Total paint cost: $" &lt;&lt; Rect.getCost(area) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>重载运算符和重载函数：C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。当您调用一个<strong>重载函数</strong>或<strong>重载运算符</strong>时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为<strong>重载决策</strong></p><ul><li><p>函数重载</p><p>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指<strong>参数的个数、类型或者顺序</strong>）必须不同。您不能仅通过返回类型的不同来重载函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std; class printData{   public:      void print(int i) {        cout &lt;&lt; "整数为: " &lt;&lt; i &lt;&lt; endl;      }       void print(double  f) {        cout &lt;&lt; "浮点数为: " &lt;&lt; f &lt;&lt; endl;      }       void print(char c[]) {        cout &lt;&lt; "字符串为: " &lt;&lt; c &lt;&lt; endl;      }}; int main(void){   printData pd;    // 输出整数   pd.print(5);   // 输出浮点数   pd.print(500.263);   // 输出字符串   char c[] = "Hello C++";   pd.print(c);    return 0;}---------------------------------------------------------------------整数为: 5浮点数为: 500.263字符串为: Hello C++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运算符重载</p><p>您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Box operator+(const Box&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Box operator+(const Box&amp;, const Box&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std; class Box{   public:       double getVolume(void)      {         return length * breadth * height;      }      void setLength( double len )      {          length = len;      }       void setBreadth( double bre )      {          breadth = bre;      }       void setHeight( double hei )      {          height = hei;      }      // 重载 + 运算符，用于把两个 Box 对象相加      Box operator+(const Box&amp; b)      {         Box box;         box.length = this-&gt;length + b.length;         box.breadth = this-&gt;breadth + b.breadth;         box.height = this-&gt;height + b.height;         return box;      }   private:      double length;      // 长度      double breadth;     // 宽度      double height;      // 高度};// 程序的主函数int main( ){   Box Box1;                // 声明 Box1，类型为 Box   Box Box2;                // 声明 Box2，类型为 Box   Box Box3;                // 声明 Box3，类型为 Box   double volume = 0.0;     // 把体积存储在该变量中    // Box1 详述   Box1.setLength(6.0);    Box1.setBreadth(7.0);    Box1.setHeight(5.0);    // Box2 详述   Box2.setLength(12.0);    Box2.setBreadth(13.0);    Box2.setHeight(10.0);    // Box1 的体积   volume = Box1.getVolume();   cout &lt;&lt; "Volume of Box1 : " &lt;&lt; volume &lt;&lt;endl;    // Box2 的体积   volume = Box2.getVolume();   cout &lt;&lt; "Volume of Box2 : " &lt;&lt; volume &lt;&lt;endl;    // 把两个对象相加，得到 Box3   Box3 = Box1 + Box2;    // Box3 的体积   volume = Box3.getVolume();   cout &lt;&lt; "Volume of Box3 : " &lt;&lt; volume &lt;&lt;endl;    return 0;}---------------------------------------------------------------------Volume of Box1 : 210Volume of Box2 : 1560Volume of Box3 : 5400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为可重载的运算符</p><table><thead><tr><th>双目算术运算符</th><th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th></tr></thead><tbody><tr><td>关系运算符</td><td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于)，&lt;=(小于等于)，&gt;=(大于等于)</td></tr><tr><td>逻辑运算符</td><td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>=, +=, -=, *=, /= , % = , &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td><strong>()</strong>(函数调用)，**-&gt;<strong>(成员访问)，</strong>,<strong>(逗号)，</strong>[]**(下标)</td></tr></tbody></table><p>以下为不可重载的运算符</p><ul><li><code>.</code>：成员访问运算符</li><li>**<code>.\*, -&gt;\*</code>**：成员指针访问运算符</li><li><code>::</code>：域运算符</li><li><code>sizeof</code>：长度运算符</li><li><code>?:</code>：条件运算符</li><li><code>#</code>： 预处理符号</li></ul><p>运算符重载实例</p><table><thead><tr><th align="left">序号</th><th align="left">运算符和实例</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/cplusplus/unary-operators-overloading.html">一元运算符重载</a></td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/cplusplus/binary-operators-overloading.html">二元运算符重载</a></td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/cplusplus/relational-operators-overloading.html">关系运算符重载</a></td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/cplusplus/input-output-operators-overloading.html">输入/输出运算符重载</a></td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/cplusplus/increment-decrement-operators-overloading.html">++ 和 – 运算符重载</a></td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/cplusplus/assignment-operators-overloading.html">赋值运算符重载</a></td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/cplusplus/function-call-operator-overloading.html">函数调用运算符 () 重载</a></td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/cplusplus/subscripting-operator-overloading.html">下标运算符 [] 重载</a></td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/cplusplus/class-member-access-operator-overloading.html">类成员访问运算符 -&gt; 重载</a></td></tr></tbody></table></li></ul></li><li><p>多态：如果基类和派生类里面定义了相同的方法，在调用的时候该方法是基类的方法，这是静态多态，例如下面这个例子</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; using namespace std; class Shape {   protected:      int width, height;   public:      Shape( int a=0, int b=0)      {         width = a;         height = b;      }      int area()      {         cout &lt;&lt; "Parent class area :" &lt;&lt;endl;         return 0;      }};class Rectangle: public Shape{   public:      Rectangle( int a=0, int b=0):Shape(a, b) { }      int area ()      {          cout &lt;&lt; "Rectangle class area :" &lt;&lt;endl;         return (width * height);       }};class Triangle: public Shape{   public:      Triangle( int a=0, int b=0):Shape(a, b) { }      int area ()      {          cout &lt;&lt; "Triangle class area :" &lt;&lt;endl;         return (width * height / 2);       }};// 程序的主函数int main( ){   Shape *shape;   Rectangle rec(10,7);   Triangle  tri(10,5);    // 存储矩形的地址   shape = &amp;rec;   // 调用矩形的求面积函数 area   shape-&gt;area();    // 存储三角形的地址   shape = &amp;tri;   // 调用三角形的求面积函数 area   shape-&gt;area();      return 0;}-------------------------------------------------------------------------Parent class area :Parent class area :<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到结果都是基类里面的方法，如果想使用派生类的方法可以在派生类的方法前面加入一个virture，表示这是一个虚函数,如果你想在基类中定义虚函数，让派生类可以重新定义，这个时候基类中不能有实际意义的实现，需要用到纯虚函数，即让它为空值，如果是int就为0，char为’0‘，指针为NULL</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Shape {   protected:      int width, height;   public:      Shape( int a=0, int b=0)      {         width = a;         height = b;      }      // pure virtual function      virtual int area() = 0;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 知识体系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识体系</title>
      <link href="posts/d43b3954.html"/>
      <url>posts/d43b3954.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><ol><li><p>文件系统和数据库的区别</p><ul><li>数据结构性<ul><li>文件系统把数据组织成相互独立的数据文件，实现了<strong>记录内的结构性</strong>，<strong>但整体无结构</strong></li><li>l数据库系统实现<strong>整体数据的结构化</strong>，也是数据库系统与文件系统的本质区别</li></ul></li><li>数据独立性<ul><li>文件系统中的文件是为某一特定应用服务的，当要修改数据的逻辑结构时，必须修改应用程序，修改文件结构的定义，数据和程序之间缺乏独立性</li><li>数据库系统中，通过DBMS的两级映象实现了数据的物理独立性和逻辑独立性，把数据的定义从程序中分离出去，减少了应用程序的维护和修改</li></ul></li><li>数据共享<ul><li>数据库系统的共享度高。系统现有用户和程序可以共享数据库中的数据；当系统扩充时还可以开发出新的用户和程序来共享原有数据库资源；多用户或或程序可以在同一时刻共享同一数据</li><li>文件系统实现以文件为单位的数据共享</li></ul></li><li>数据冗余<ul><li>在文件系统中，数据冗余度大，浪费存储空间，容易造成数据的不一致</li><li>数据库系统中，数据是面向整个系统，数据可以被多个用户、多个应用共享使用，减少了数据冗余</li></ul></li></ul></li><li><p><strong>数据库管理系统</strong>（DBMS）是位于用户与操作系统之间的一层数据管理软件，是一个大型的复杂的软件系统，用于科学地组织和存储数据、高效地获取和维护数据</p></li><li><p>ACID：数据库事务正确执行的四个基本要素，包括<strong>原子性</strong>（Atomicity）、<strong>一致性</strong>（Consistency）、<strong>隔离性</strong>（Isolation）、<strong>持久性</strong>（Durability）</p></li><li><p>数据库管理系统的功能</p><ul><li>数据定义功能<ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理<ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li>数据库操作功能<ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操作  （查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运行管理<ul><li>数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li>数据库的建立和维护功能<ul><li>数据库初始数据的装载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li>其他功能<ul><li>数据库管理系统与网络中其它软件系统的通信</li><li>数据库管理系统系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul></li><li><p>数据库系统（DBS）组成</p><ul><li>数据库</li><li>DBMS</li><li>应用程序</li><li>数据库管理员</li></ul></li><li><p>数据库类型</p><ul><li>文件型数据库—文件型数据库可以认为是最简单的一种数据库模型，其实现非常简单，就是读写一个简单的文件，分隔符多样，文件类型可以是CSV、TSV或者是JSON文件。数据直接以人类可读的形式呈现，程序也比较容易解析。文件型数据库其实现非常简单，同样地这也限制了它的使用。例如在并发和并行的场景下，文件型数据库就表现的不是那么友好，且读取性能不是那么优秀，单点查询和范围查找的需要从头遍历整个文件</li><li>层次数据库—层次数据库模型诞生于1960年代，是文件型数据的下一个形态。层次数据库模型类似于一个树状结构，每条记录有且仅有一个父节点，类似于下图。层次数据库是人们第一次尝试去思考和处理复杂数据，在一定程度上提升了文件型数据库的一些特定数据读取方式的性能，但是层次数据库是基于树状的模型，访问层次数据库类似于遍历链表，很难实现对复杂数据的读取</li><li>网状数据库—网状数据库也诞生于1960年代。数据系统语言会议（（Conference on Data Systems Languages,CODASYL）的委员会标准化了网状数据库模型，因此网状数据库模型也被称为 CODASYL 模型。网状数据库进一步发展了层次数据库模型，解决了层次数据库有且仅有一个父节点的问题。网状数据库模型的子节点可以拥有多个父节点，同时这也带来了更高的复杂性。和层次数据库模型一样，网状数据库模型的查询和更新都需要遍历链表，给开发带了无尽的难度，这使得网状数据库模型逐渐没落。毕竟能使用网状数据库模型的地方</li><li><strong>关系型数据库</strong>—关系型数据库模型诞生于1960年代，是现存的数据库模型中活得最久、生命力最旺盛、使用的最为广泛的数据模型。关系型数据库模型在刚提出来时，并不受到待见，但是在二十世纪八十年代成为了绝大多数人的首选数据库。关系型数据库模型基于关系代数，它认为：数据可以被组织成关系（SQL中称作表），其中每个关系是元组（SQL中称作行)的无序集合。换句话说，一个关系（表）只是一个元 组（行）的集合。关系型数据库模型解决了层次数据库模型无法表达多对多关系的能力；在关系型数据库中，读取数据时不再需要像访问链表一样去访问数据，开发者可以随意读取表中的任意行和列；并且关系型数据库引入了外键的概念，使得表和表之间可以轻易的关联起来•适用于关系型数据库的查询语言是SQL。SQL作为一个图灵完备的语言，已经不仅仅局限于关系型数据库，而是成为数据库领域中当之无愧的王者。SQL的核心在于查询优化器，由查询优化器自动决定SQL的哪些部分以哪个顺序执行，以及使用什么索引。总的来说，关系型数据库模型以其强大的灵活性和适应力成为了开发者的首选数据库模型</li></ul></li><li><p>数据模型</p><ul><li>概念数据模型：是对现实世界的抽象</li><li>逻辑数据模型</li><li>物理数据模型</li></ul></li><li><p>三级模式结构</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/sjms.png" style="zoom:50%;"><ul><li>关系数据库中的模式一定是关系的，在该层可见的实体是关系的表和关系的操作符</li><li>外模式也是关系的，它的内容是来自模式</li><li>内模式不是关系的，它是数据的物理存储方式</li></ul></li></ol><h1 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h1><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><ol><li><p>关系代数</p><ul><li>关系模型源于数学，关系是由元组构成的集合，可以通过关系的运算来表达查询要求</li><li>关系代数是关系数据库的基础</li><li>关系代数是<strong>关系操作语言</strong>的一种传统的表示方式，它是一种抽象的查询语言</li><li><strong>关系代数的运算</strong>可分为两大类<ul><li>传统的集合运算：广义笛卡尔积运算、并、交和差运算</li><li>专门的关系运算：选择、投影、连接和除运算</li></ul></li></ul></li><li><p>关系代数运算符</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/gxys.png" style="zoom:50%;"><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/gxys0.png" style="zoom:50%;"></li><li><p>专门的关系运算</p><ul><li><p>选择</p><p>在关系R中选择满足给定条件的诸元组    </p><p>σF(R) = {t|t∈R∧F(t)=’true’}</p><p>F：选择条件，是一个逻辑表达式，取值为“true”或“false”<br>基本形式为：F(t) = X1 θ Y1<br>θ表示比较运算符，它可以是＞，≥，＜，≤，＝ 或 ≠</p><p>选择运算是从关系R中选取使逻辑表达式F为真的元组，是从行的角度进行的运算</p></li><li><p>投影</p><p>从R中选择出若干属性列组成新的关系</p><pre><code>          ∏A(R) = { t[A] | t ∈R }</code></pre><p>A：R中的属性列<br>投影操作主要是从列的角度进行运算</p><blockquote><p>投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）</p></blockquote></li><li><p>连接</p><p>连接也称为θ连接,连接运算是从两个关系的笛卡尔积中选取属性间满足一定条件的元组</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/lj.png" style="zoom:50%;"><p>A和B：分别为R和S上度数相等且可比的属性组，<br>θ：比较运算符 </p><p>连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上的值满足比较关系θ的元组 </p><ul><li><p>等值连接：θ为“＝”的连接运算</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/dz.png" style="zoom:50%;"></li><li><p>自然连接：一种特殊的等值连接，两个关系中进行比较的分量必须是相同的属性组在结果中把重复的属性列去掉，假设<em>R</em>和<em>S</em>具有相同的属性组<em>B</em></p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/zr.png" style="zoom:50%;"><blockquote><p>等值连接中不要求相等属性值的属性名相同，而自然连接要求相等属性值的属性名必须相同，即两关系只有在同名属性才能进行自然连接</p><p>等值连接不将重复属性去掉，而自然连接去掉重复属性，也可以说，自然连接是去掉重复列的等值连接</p></blockquote></li></ul></li><li><p>除运算</p><p>经常用于求解“查询…全部的/所以的…”问题<br>前提条件：给定关系R(A1,A2,…,An)为n度（目）关系，关系S(B1，B2,…,Bm)为m度关系。如果可以进行关系R与关系S 的除运算，当且仅当：属性集(B1，B2,…,Bm)是属性集(A1,A2,…,An)的真子集，即m&lt;n。<br>定义：关系S和关系R的除运算也是一个关系，记作：R ÷ S, 分两部分来定义。</p><p>先定义R ÷ S结果的属性应有哪些？<br>设属性集{C1,C2,…,Ck} = {A1,A2,…,An} – {B1,B2,…,Bm} , 则有 k=n-m, R ÷ S结果关系是一个k(n-m)度关系，由{C1,C2,…,Ck} 属性组成。</p><p>再定义R ÷ S的元组怎样形成？<br>再设关系R(&lt;a1,a2,…,an&gt;)和关系S(&lt; b1,b2,…,bm &gt;),那么R÷S结果关系为元组&lt; c1,c2,…,ck &gt;的集合，元组 &lt; c1,c2,…,ck &gt;满足下述条件：<br>R÷S中&lt; c1,c2,…,ck &gt;与S中的每一个元组&lt; b1,b2,…,bm &gt;组合形成的一个元组都是R中的某一个元组&lt;a1,a2,…,an&gt;。（其中 a1,a2,…,an， b1,b2,…,bm ， c1,c2,…,ck 分别为 A1,…,An,B1,…,Bm,C1,…,Ck的值）</p><p>​                        R ÷ S = {t | t∈∏R-S (R) ∧∀u∈S(tu∈R)}</p></li></ul></li></ol><ol start="4"><li><p>符号表示</p><ul><li><p>设关系模式是R(A1,A2,….,An)</p><ul><li>R: 是关系模式R(A1, A2, …,An)的一个关系</li><li>t∈ R : 表示t是R的一个元组</li><li>t[Ai] : 表示元组t中相应于Ai的一个分量(元组 t对应字段或属性Ai的值)</li></ul></li><li><p>若 A = {Ai1, Ai2, …,Aik}, 其中Ai1，Ai2, …,Aik 是A1，A2,…,An中的一部分，则A称为属性列或属性组</p></li><li><p>t[A] = (t[Ai1], t[Ai2] …,t[Aik]) 表示元组t在属性列A上诸分量的集合</p></li><li><p>Ā 则表示{A1, A2, …,An}中去掉{Ai1, Ai2, …,Aik}后剩余的属性组</p></li><li><p>R 为n 目关系，S为m目关系。 tr ∈R, ts ∈ S, <img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/trts.png" style="zoom: 50%;">称为元组连接，且是一个n+m列的元组，前n个分量是R中的一个n元组，后m个分量是S中的一个m分量</p></li><li><p>给定一个关系R(X,Y),X和Y为属性组。当t[X] = x 时，x在R中的象集(Image Set)为：Yx = {t[Y]|t∈R, t[X] = x}它表示R中属性组X上值为x的诸元组在Y上分量的集合</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/xj.png" style="zoom:50%;"></li></ul></li></ol><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><ol><li><p>域：是一组具有相同数据类型值的集合，域指的是属性的取值范围,也就是不同元组对同一属性的取值所限定的范围<br>例如，整数、正整数、实数、大于等于0且小于等于100的正整数、{0,1,2,3,4}等都可以是域</p></li><li><p>基数：一个域允许的不同取值个数称为这个域的基数</p></li><li><p>属性：每列取一个名字</p></li><li><p>键</p><ul><li><p>超键：超键是表中字段的任何组合，可以唯一地标识该表中的每个记录</p></li><li><p>候选键：候选键是超键的子集。候选键是唯一标识表中每个记录的单个字段或字段的最小组合。字段的最小组合将候选键与超键区分开。每个表必须至少具有一个候选键，但同时可以具有多个候选键</p><blockquote><p>候选键必须包含唯一值，不能包含空值，包含最少数量的字段来确保唯一性，必须唯一标识表中的每个记录</p></blockquote></li><li><p>主键：是最适合用作表的主要参考键的候选键。顾名思义，它是表引用的主键，并在整个数据库中用于帮助与其他表建立关系。与任何候选键一样，主键必须包含唯一值，绝不能为null，并且唯一标识表中的每个记录</p><blockquote><p>每个表都必须有主键<br>每个记录必须为其主键有一个值<br>从候选键中选择主键时，选择一个简单键</p></blockquote></li><li><p>外键：通常是一个表中的主键，它在另一个表中作为字段出现，其中第一个表与第二个表有关系。换句话说，如果我们有一个表A，该表的主键X链接到表B，其中X是B中的一个字段，那么X将是B中的外键。</p></li><li><p>替代键：一个表可能有一个或多个主键选择。如前所述，它们被统称为候选键。选择一个作为主键。未选择的键称为替代键</p></li><li><p>唯一键：唯一键是表的一个或多个字段/列的集合，它们唯一地标识数据库表中的记录。就像主键一样，但是它只能接受一个空值，并且不能有重复值</p><blockquote><p>主键与唯一键的区别：<br>主键不能接受空值，而唯一键可以接受一个空值<br>主键是聚簇索引，并且数据库表中的数据按照聚簇索引的顺序进行物理组织。唯一键是唯一的非聚集索引<br>一个表中只能有一个主键。而一个表中有多个唯一键</p></blockquote></li></ul></li></ol><ol start="5"><li><p>关系的限定和扩充</p><ul><li><p>限定：无限关系在数据库系统中是无意义的，限定关系数据模型中的关系必须是有限集合</p></li><li><p>扩充：通过为关系的每个列附加一个属性名的方法取消关系属性的有序性</p><blockquote><p>数学上  （计算机，信息）≠ (信息，计算机)<br>数据库上 （计算机，信息）= (信息，计算机)</p></blockquote></li></ul></li><li><p>关系数据库：所有关系的集合</p><ul><li>型：关系数据库的型称为关系数据库模式，是对关系数据库的描述</li><li>值：关系数据库的值是这些关系模式在某些时刻对应的关系的集合，通常称作关系数据库</li></ul></li><li><p>关系的完整性约束</p><ul><li>实体完整性：主码不能取空值</li><li>参照完整性：一个关系的外键必须是另一个关系的主键，也可以是空</li><li>用户定义的完整性：指对关系中每个属性的取值作一个限制(或称为约束)的具体定义</li></ul></li></ol><h1 id="第三章-SQL"><a href="#第三章-SQL" class="headerlink" title="第三章 SQL"></a>第三章 SQL</h1><h2 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h2><ol><li><p>SQL（结构化查询语言）是一种非过程化的语言，使用者只需要说明“做什么”而不需要说明“怎么做”，是关系数据库的标准语言，通用功能强</p></li><li><p>SQL集定义、操作、查询和控制为一体</p></li><li><p>SQL表的数据类型</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/sql.png" style="zoom: 67%;"></li><li><p>SQL表语句的基本语法</p><ul><li><p>创建表</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]        [,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ]         …        [,&lt;表级完整性约束条件&gt; ]        );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：创建一个课程的表</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE  Course   (  Cno  CHAR(4) PRIMARY KEY, //主键      Cname  CHAR(40),                  Cpno  CHAR(4),                                           Ccredit  SMALLINT，      FOREIGN KEY (Cpno) REFERENCES  Course(Cno)       //外键，Course(Cno)为被参照表（被参照列）   );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li><p>修改表</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE &lt;表名&gt;    [ ADD[COLUMN] &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ]    [ ADD &lt;表级完整性约束&gt;]   [ DROP [ COLUMN ] &lt;列名&gt; [CASCADE| RESTRICT] ]    [ DROP CONSTRAINT&lt;完整性约束名&gt;[ RESTRICT | CASCADE ] ]    [ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code> - ADD子句用于增加新列、新的列级完整性约束条件和新的表级完整性约束条件 - DROP COLUMN子句用于删除表中的列如果指定了CASCADE短语，则自动删除引用了该列的其他对象如果指定了RESTRICT短语，则如果该列被其他对象引用，关系数据库管理系统将拒绝删除该列 - DROP CONSTRAINT子句用于删除指定的完整性约束条件 - ALTER COLUMN子句用于修改原有的列定义，包括修改列名和数据类型 - 删除列:            ALTER TABLE 表名 DROP COLUMN 列名   增加列:            ALTER TABLE 表名 ADD COLUMN 列名 属性 【约束】   修改列类型:     ALTER TABLE 表名 CHANGE COLUMN 列名 新列名 【新属性】   重命名列:         ALTER TABLE 表名字 CHANGE COLUMN 列名 新列名   重命名表:         ALTER TABLE 表名 RENAME TO 表新名   删除表中主键:  ALTER TABLE 表名 DROP PRIMARY KEY    添加主键:         ALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (添加列)   添加索引:         ALTER TABLE 表名 ADD INDEX 索引名 (列名)   修改列的属性:  ALTER TABLE 表名 MODIFY COLUMN 列名 新属性</code></pre><ul><li><p>删除表</p><p><code>DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］</code></p><blockquote><p>RESTRICT：删除表是有限制的欲删除的基本表不能被其他表的约束所引用；如果存在依赖该表的对象，则此表不能被删除<br>CASCADE：删除该表没有限制在删除基本表的同时，相关的依赖对象（表定义、数据、索引、视图、触发器等）一起删除</p></blockquote></li></ul><ol start="5"><li><p>SQL索引</p><ul><li><p>创建索引</p><pre class="line-numbers language-none"><code class="language-none">CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;] ]…)&lt;表名&gt;：要建索引的基本表的名字索引：可以建立在该表的一列或多列上，各列名之间用逗号分隔&lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASCUNIQUE：此索引的每一个索引值只对应唯一的数据记录CLUSTER：表示要建立的索引是聚簇索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li><p>修改索引</p><p> <code>ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt;</code> </p></li><li><p>删除索引</p><p><code>DROP INDEX &lt;索引名&gt;</code></p></li></ul><ol start="6"><li><p>SQL视图</p><ul><li><p>定义：视图是从一个或几个基本表（或视图）导出的表。它与基本表不同，是一个虚表。数据库只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。从这个意义上讲，视图就像一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化</p></li><li><p>优点</p><ul><li>简化用户操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护</li><li>适当的利用视图可以更清晰地表达查询</li></ul></li><li><p>创建视图</p><p><code>CREATE  VIEW  &lt;视图名&gt;  [(&lt;列名&gt;  [,&lt;列名&gt;]…) AS  &lt;子查询&gt; [WITH  CHECK  OPTION];</code></p><ul><li>子查询可以是任意的SELECT语句，是否可以含有ORDER BY子句和DISTINCT短语，则决定具体系统的实现</li><li>WITH CHECK OPTION：对视图进行UPDATE，INSERT和DELETE操作时要保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）</li></ul></li><li><p>删除视图</p><p><code>DROP VIEW &lt;视图名&gt;[CASCADE]</code></p><p>该语句从数据字典中删除指定的视图定义<br>如果该视图上还导出了其他视图，使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除<br>删除基表时，由该基表导出的所有视图定义都必须显式地使用DROP VIEW语句删除</p></li><li><p>更新视图</p><ul><li><p>插入</p><p><code>INSERT INTO IS_Student VALUES(‘201215129’,’赵新’,20)</code></p></li><li><p>修改</p><p><code>UPDATE IS_Student SET Sname= ‘刘辰’ WHERE Sno= ‘201215122’</code></p></li><li><p>删除</p><p><code>DELETE FROM IS_Student WHERE Sno= ' 201215129 '</code></p></li></ul></li></ul></li></ol><h2 id="单表和多表查询"><a href="#单表和多表查询" class="headerlink" title="单表和多表查询"></a>单表和多表查询</h2><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/sqldb.png"></p><ol><li><p>SQL查询</p><pre class="line-numbers language-none"><code class="language-none">SELECT [&lt;SELECT选项&gt;]              &lt;字段列表[字段别名]               [表达式] [常量] [(SELECT子句)] &gt;              FROM 子句              [WHERE子句]           [GROUP BY子句 ]          [HAVING 子句]          [ORDER BY 子句]          [LIMIT 子句];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>SELECT选项：ALL(缺省)和DISTINCT</li><li>SELECT子句：指定要显示的属性列</li><li>FROM子句：指定查询对象（基本表或视图）</li><li>WHERE子句：指定查询条件</li><li>GROUP BY子句：对查询结果按指定列的值分组 该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。</li><li>HAVING短语：只有满足指定条件的组才予以输出</li><li>ORDER BY子句：对查询结果表按指定列值的升序或降序排序 </li><li>LIMIT子句：用于限制查询结果返回的数量</li></ul><ol start="2"><li><p>SQL TOP子句</p><p>TOP <num><br>TOP 子句用于规定要返回的记录的数目num。<br>对于拥有数千条记录的大型表来说 TOP 子句是非常有用的</num></p><p>例如：SELECT TOP 50 PERCENT * FROM Persons</p><blockquote><p>并非所有的数据库都支持TOP子句</p></blockquote></li><li><p>SQL alias（别名）</p><ul><li><p>为什么要用别名</p><ul><li>数据库中往往过长的表名或列名会对我们数据统计,显示（中文）造成困扰</li><li>书写比较方便</li></ul></li><li><p>别名怎么定义和使用</p><pre class="line-numbers language-none"><code class="language-none">Select  字段 AS 别名Select  字段  别名Select  别名=字段From student as sFrom student sFrom s=student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><blockquote><p>这一部分的SQL语句平时用多了自然就熟练了，基础知识真没啥好说的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说废话</title>
      <link href="posts/f60ce65.html"/>
      <url>posts/f60ce65.html</url>
      
        <content type="html"><![CDATA[<p>不知道该怎么开口，这应该是第一次在博客里面发泄自己的情绪，不知道以后还会不会这样，如果可以，谁又会去自寻烦恼呢</p><p>说起来我算是找准了自己的方向，但是这个社会越深入的去了解就会越无力，我不知道自己是不是属于那种开拓性的人格，但是我确实不喜欢这个被垄断着的世界和社会，有的时候我也会去逃避现实，可那又有什么用呢，无论自己怎么躲，仍然要回来接受社会的毒打，我也想无忧无虑，可是没有什么办法啊，我只是一个普通人而已，也要为了生活而劳碌，疲于奔命，每当夜里自己看着别人的成功的时候我都会想，这个社会如果公平一点就好，如果那些毫无底线的演员没有那么多的收入，把这些收入用来充实普通人的生活该有多好，但是确实想多了，这个时代，流量为王，一切和流量有关的人或者事情都能过的充足，我自己也是因为这个才选择了互联网，说到底最后还是一个社畜，和其他行业的社畜没什么两样，只不过这个行业里面的社畜生活更好一点吧，如果我早生20年，现在是否也是一届巨头，想多了，更大的可能我应该没接受啥教育在某一个不知名的世界500万强的电子厂里面打工，有的时候我也该感谢这个时代，起码让我有机会去迷茫</p><p>关于生活，来到基地以后，这里的硬件条件确实不错，我甚至觉得自己一个人的话可以在这住上个几十年，多想就这样啊，但是还是想想就好，自己渐渐学会自己做一点食物，以后应该也不会饿死，不用为了外面的卫生而焦急说到底这些本该在毕业的时候煽情一点的话语现在却突然涌现出来，应该是我自己慢慢习惯这里的生活了吧。学会照顾自己，真好</p><p>关于情感，我应该是一个矛盾体，羡慕着别人的爱情却无法迈出自己的双腿，应该也会与sq无缘了吧，说到底我连自己会不会去爱都没有搞清楚，经常给自己一个借口，本科阶段不应该想这些，但是以后呢，自己真的能迈过心理的那道坎吗？我的青春是一片灰色，里面有一抹橙色，现在看来，年少心动的只有kyy了吧，那个课间那抹微笑，而高三造过的孽对我来说已经释怀，不知道ljj是否会释怀，希望她也会吧，我应该学着去减轻生活中爱的成分，对我来说也许真的不适合说爱这个字，今天11.11，祝自己单身快乐！</p><p>感觉还有好多话想说，但是不知道该怎么说，先这样吧，以后有机会在bb，希望github多坚挺几十年吧，我还想在自己退休以后看看自己写的心里话和烦恼，希望那个时候的自己是一个幸福的人。</p>]]></content>
      
      
      <categories>
          
          <category> 心事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nonsense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识总结（三）</title>
      <link href="posts/ed71a2a6.html"/>
      <url>posts/ed71a2a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><blockquote><p>网络层是主机和主机之间的交互，本部分的内容比较繁杂，计算也较多需要细心消化</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>实现主机之间的通信</p><h3 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h3><ol><li>为运输层提供支持</li><li>每一台分组交换机均需要实现网络层</li></ol><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>控制层面：在全局范畴内为主机之间进行选路，选路的结果反映为分组交换机的转发表</li><li>数据层面：分组交换机上的网络层根据转发表以及分组头部信息将分组向适当链路进行转发</li></ol><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>分组交换机<ul><li>链路层节点交换机：根据链路层首部进行转发</li><li>路由器：根据网络层首部进行转发</li></ul></li></ol><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ul><li>确保支付</li><li>具有时延上界的确保支付</li><li>有序分组交付</li><li>确保最小带宽</li><li>确保最大时延抖动</li><li>安全性服务</li></ul><h2 id="虚电路和数据报网络"><a href="#虚电路和数据报网络" class="headerlink" title="虚电路和数据报网络"></a>虚电路和数据报网络</h2><h3 id="虚电路"><a href="#虚电路" class="headerlink" title="虚电路"></a>虚电路</h3><ul><li>面向连接的服务，需要事先进行握手</li><li>目标：使得收发双发之间的路径表现的如同电话线路一般</li><li>工作机制<ol><li>数据开始流动前，呼叫建立，流动结束之后断开</li><li>每一个分组携带虚电路的标识</li><li>路径中的每一个路由器必须为进行中的连接维持连接状态</li><li>链路路由器资源（带宽、缓冲区）可以分配给虚电路，为了达到类似线路交换的性能</li></ol></li><li>组成<ul><li>从源到目的主机的路径：一系列链路和路由器</li><li>VC号，沿着该路径的每段链路的一个号码<ul><li>一条虚电路在每一条链路上具有不同的VC号</li><li>每台中间路由器都必须用一个新的VC号来替代每个传输分组的VC号</li></ul></li><li>沿着该路径的每台路由器的转发表<ul><li>创建一个新的虚电路之后，转发表需要增加一个新表项</li><li>终止一条虚电路之后，表中相应的项被删除</li></ul></li></ul></li></ul><h3 id="数据报网络"><a href="#数据报网络" class="headerlink" title="数据报网络"></a>数据报网络</h3><ul><li>面向无连接的服务</li><li>路由器在端到端的连接中不维护状态信息</li><li>传输报文的时候使用目的主机信息</li></ul><h2 id="路由器的工作原理"><a href="#路由器的工作原理" class="headerlink" title="路由器的工作原理"></a>路由器的工作原理</h2><blockquote><p>路由器主要是路由选择和分组转发，路由选择涉及到路由算法和协议</p></blockquote><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/ly.png" style="zoom:50%;"><ul><li><p>输入端口的交换</p><ul><li><p>分散式交换：按照给出的目的地址，使用输入端口的内存中存储的路由表，查找输出端口</p><ul><li><p>目标：以“线路速度”完成输入端口的处理</p></li><li><p>排队：如果数据报到达的速度超过了输入端口将数据报转交给交换结构的速度，则后到的分组会暂时阻塞</p><blockquote><p>输入缓冲区溢出也可以导致排队时延和丢包</p></blockquote></li></ul></li><li><p>经过内存交换</p><ul><li>输入端口和输出端口之间的交换实在CPU（路由处理器）的直接控制下完成的</li><li>分组被拷贝到系统内存中，CPU提出报头中的目标地址，查找路由表中的输出接口，将数据包拷贝到输出接口</li><li>转发速度受限于内存的带宽</li><li>一次转发一个分组</li></ul></li><li><p>经过内联网络</p><ul><li>克服总线带宽的限制</li></ul></li><li><p>经过总线交换</p><ul><li>输入端口通过一根共享总线将分组直接传送到输出端口</li><li>交换速度受限于总线的宽度</li><li>一次一个分组</li></ul></li></ul></li><li><p>输出端口的交换</p></li></ul><h2 id="网际协议：因特网中的转发和编址"><a href="#网际协议：因特网中的转发和编址" class="headerlink" title="网际协议：因特网中的转发和编址"></a>网际协议：因特网中的转发和编址</h2><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><ul><li><p>IP数据报的格式</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/ip.png" style="zoom: 50%;"></li><li><p>IP分片和重组</p><p>大的数据报变成了几个小的数据报，在目的主机处进行重组，重组的根据是数据报头部的标识、标志和片偏移字段</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/ipfz.png" style="zoom:50%;"></li><li><p>IP地址：32位的主机或者路由器的接口标志符，高位网络号（子网号），低位主机号</p></li><li><p>接口：连接主机、路由器之间的物理链路</p><blockquote><p>一般来说，路由器有多个接口，主机也有可能有多个接口，IP地址只和接口有关，而与主机、路由器却没有太多关联</p></blockquote></li><li><p>IP地址的分类</p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/ipfl.png" style="zoom:50%;"></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识总结（二）</title>
      <link href="posts/a06f01f4.html"/>
      <url>posts/a06f01f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、应用层"><a href="#二、应用层" class="headerlink" title="二、应用层"></a>二、应用层</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>网络应用的架构有三种：C/S模型（客户端/服务器）、对等网（Peer-to-Peer，P2P）、混合体系（C/S+P2P)</p><ul><li><code>C/S</code>:服务器总是打开拥有一个固定的地址并且是一个缩放的数据中心，客户端可以和服务器通信，但不能与客户端通信，且通信可能是间歇性的，客户端拥有动态的IP地址</li><li><code>P2P</code>：客户端之间是对等的，可以通信，提供服务也享受服务，结点之间的连接是间歇性的地址也是变化的</li></ul></li><li><p>网络应用进程使用<code>套接字</code>来唯一确定</p></li><li><p>套接字包含主机地址和端口号</p><ul><li>主机地址：标识该网络应用进程运行在网上哪一台主机上，通常使用<code>32位</code>的ip地址来进行标识。</li><li>端口地址：在该主机上标识该网络应用进程，通常使用<code>16位</code>的端口号来进行标识</li></ul></li><li><p>运输层传输协议主要有两个：TCP和UDP</p><ul><li>TCP<ul><li>面向连接：在客户端和服务器端进程之间需要进行连接</li><li>可靠传输：在发送和接受进程之间</li><li>流量控制：发送数据的速度不会超过接受的速度</li><li>拥塞控制：当网络超负荷时，减缓发送速度</li><li>目前缺陷：不提供最小带宽承诺和实时性传输</li></ul></li><li>UDP<ul><li>不可靠的数据传输</li><li>不需要建立连接</li><li>没有流量控制和拥塞控制</li><li>不提供实时传输和最小带宽承诺</li></ul></li></ul></li><li><p>应用层协议</p><ul><li><p>HTTP</p><ul><li><p>无状态的：服务器不保留任何访问过的请求信息</p><blockquote><p>保留过去的请求信息会造成隐患，如果浏览器或者服务器崩溃那么各自的状态视图就会发生分歧，需要重新核对</p></blockquote></li><li><p>HTTP采用TCP来作为运输协议步骤如下</p><ol><li>客户端启动TCP连接（创建套接字）到服务器，<code>端口80</code></li><li>服务器接受来自客户端的TCP连接</li><li>http报文（应用层协议报文）在浏览器和web服务器之间进行交换</li><li>关闭TCP连接</li></ol></li><li><p>HTTP传输模式</p><ul><li><strong>1.0—非持久连接</strong>：每个TCP连接仅仅传输一个请求报文和响应报文，即每个TCP连接在浏览器发送一个对象之后就会关闭，不会持续连接</li><li><strong>1.1—持久连接</strong>：服务器发送响应报文以后，TCP连接不会立即断开，继续保持这连接状态，知道长时间没有对象的运输才进行断开，减少了对服务器的套接字的占用，提高了服务器的负载能力<ul><li>非流水线方式：一个对象传输完成才能传输下一个对象</li><li>流水线方式：一次性的发送所有的请求，慢慢接受</li></ul></li></ul></li><li><p>一般的HTTP请求报文格式</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/http.png" alt="一般格式"></p></li><li><p>典型的HTTP请求报文格式</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/http0.png" alt="具体报文"></p></li><li><p>HTTP请求行支持的方法</p><ul><li><p>GET（1.0/1.1）：向服务器请求指定的URL的对象</p></li><li><p>POST（1.0/1.1）：用于向服务器提交表单数据也可以请求一个web页面</p><blockquote><p>可以不使用POST方法而使用GET方法发送表单数据来获取新的WEB页面，例如搜索引擎</p></blockquote></li><li><p>HEAD（1.0/1.1）：请求服务器返回一个响应报文，但是报文中不包含请求对象，该方法常常用来进行故障追踪</p></li><li><p>PUT（1.1）：上传的文件放在实体主体字段中，目标路径由URL字段标明</p></li><li><p>DELETE（1.1）：删除URL字段中指定的文件</p></li></ul></li><li><p>HTTP响应报文的一般格式</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/httpup.png" alt="响应报文一般格式"></p></li><li><p>HTTP响应报文具体例子</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/httpup0.png" alt="具体例子"></p></li><li><p>常见的HTTP响应状态码和短语</p><ul><li>200—OK：请求成功，被请求的对象在报文中</li><li>301—Moved Permanently：被请求的对象移动过，新的位置在报文中有说明</li><li>400—Bad Request：服务器不懂请求报文</li><li>404—Not Found：服务器上找不到请求对象，<del>色情网站经常这样</del></li><li>505—HTTP Version Not Supported:服务器不支持请求报文使用的HTTP协议版本</li></ul></li><li><p>Cookie</p><ul><li><p>web站点为什么使用cookie</p><ol><li>限制用户的访问</li><li>把内容和用户的身份关联起来</li></ol></li><li><p>cookie技术的组成部分</p><ul><li>HTTP请求和响应报文里面各有一个cookie的首部行</li><li>用户的端系统上保留了一个cookie文件，由浏览器负责管理</li><li>web站点有一个后端数据库</li></ul></li><li><p>cookie工作流程</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/cookie.png"></p></li><li><p>cookie和私密性</p><ul><li>cookie允许网站获取用户的信息包括用户在一些站点用于登录的个人信息</li><li>搜索引擎可以通过cookie和重定向技术获取更多的信息</li><li>其他广告公司也能从中获取用户的信息</li></ul></li></ul></li></ul></li><li><p>SMTP</p><ul><li><p>全称简单邮件传输协议，使用TCP可靠的传送邮件报文，<code>端口为25</code></p></li><li><p>直接传输</p></li><li><p>传输的三个阶段</p><ul><li>握手（打招呼）</li><li>报文传输</li><li>结束</li></ul></li><li><p>命令：ASCll文本</p></li><li><p>响应：状态码和状态短语</p><blockquote><p>邮件报文必须使用7-bit ASCll表示，非ASCll也可以使用MIME扩展来实现转换</p></blockquote></li><li><p>非ASCll的MIME扩展</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/MIME.png"></p></li><li><p>MIME和SMTP的关系</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/smtp.png"></p></li><li><p>邮件访问协议：邮件已经传送到目的服务器上了，接收方通过邮件访问协议来读取邮件</p><ul><li><p>POP3（第三版的邮局协议）</p><ol><li><p>特许阶段：用户代理发送用户名和口令（明文）来鉴别用户</p></li><li><p>事务处理阶段：用户代理取回报文，并且可以对报文做删除标记或者删除这些标记</p></li><li><p>更新阶段：客户发出quit命令之后，删除第二步被标记为删除的报文，然后结束POP3会话</p><blockquote><p>POP3会话没有状态，用户也无法在邮件服务器上对自己的邮件进行重组织，只能将邮件先下载到本地再进行重组织</p></blockquote></li></ol></li><li><p>IMAP（因特网邮件访问协议）</p><ul><li>将所有的邮件都保存在服务器上</li><li>允许用户在服务器上组织自己的邮件目录</li><li>维护了IMAP会话的用户信息：目录名和报文ID与目录名之间的映射关系</li></ul></li><li><p>HTTP：基于web的电子邮件在浏览器和邮件服务器之间传输使用的是HTTP协议，但是邮件服务器之间的传输依旧是SMTP</p></li></ul></li></ul></li></ul></li></ol><ol start="6"><li><p>DNS：用于IP地址和域名之间的转换</p><ul><li><p>DNS是一个分布式的数据库，由很多台DNS服务器按照层次结构组织起来</p></li><li><p>DNS运行在端到端系统上，且使用的是UDP协议（53号端口）进行报文传输，<strong>因此DNS是应用层协议</strong></p></li><li><p>以C/S模式工作</p></li><li><p>DNS解析过程例子</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/dns.png"></p></li><li><p>DNS实现</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/dnssx.png"></p><hr></li></ul></li></ol><h1 id="三、运输层"><a href="#三、运输层" class="headerlink" title="三、运输层"></a>三、运输层</h1><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><ol><li><p>运输层为不同主机上运行的应用进程之间提供逻辑通信</p></li><li><p>运输层协议发送方将应用数据划分成报文段，交给网络层，接受方把报文段重组成应用数据，交付给应用层</p></li><li><p><strong>网络层是不同主机的通信，而运输层是应用进程之间的通信</strong></p></li><li><p>多路复用和多路分解</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/dlfy.png"></p></li><li><p>使用UDP套接字的时候，数据报中需要指定<code>目的IP地址和目的端口</code>，使用TCP套接字的时候，则还需要指定<code>源IP地址和源端口号</code></p></li><li><p>UDP</p><ul><li><p>发送方</p><ol><li>从应用进程得到数据</li><li>附加上多路分解和复用所需的源和目的端口号以及差错检测信息，形成报文段</li><li>递交给网络层，尽力的传送给接收方的主机（我发了，收不收的到得看人品）</li></ol></li><li><p>接收方</p><ol><li><p>从网络层接受报文段（数据报）</p></li><li><p>根据目的端口号，将数据交付给相应的应用进程</p><blockquote><p>UDP通信不需要握手，是无连接的，而且无需维护连接状态，段首部开销比TCP小，TCP20字节，UDP只需要8个字节，而且无拥塞控制，可以按需随时发送</p></blockquote></li></ol></li></ul></li><li><p>UDP的校验和=报文段的所有16比特字的和再进行反码转换，接收方将所有16比特字和校验和相加，结果如果不是全1，说明有错误，是全1，也有可能出错。</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/jyh.png"></p></li><li><p>Rdt1.0:经完全可靠信道的可靠数据传输（底层信号非常可靠，无比特差错，无分组丢失）</p></li><li><p>Rdt2.0:经具有比特差错信道的可靠数据传输（肯定确认、否定确认），这种基于重传机制的可靠数据传输协议被称为自动重传请求（ARQ）协议，在ARQ协议中有三种协议功能来处理比特差错的情况：差错检测 、接收方反馈 、重传，发送方将不会发送一块新数据，除非发送方确信接收方已正确接收当前分组。因此Rdt2.0这样的协议被称为停等协议</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt2yc.png"></p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt2wc.png"></p><blockquote><p>rdt2.0未考虑ACK和NAK分组受损的情况，这也是2.1诞生的原因</p></blockquote></li><li><p>Rdt2.1：如果ACK\NAK受损 可能导致冗余 为了处理冗余发送方对每个分组增加序列号 如果ACK\NAK受损，发送方重传当前分组，接收方丢弃冗余分组</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt21send.png"></p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt21receive.png"></p><blockquote><p>因为除了对的都是错的，那么可以去掉NAK，只传ACK，这样可以节省空间，这也是2.2的原理</p></blockquote></li><li><p>Rdt2.2 无NAK协议，代替NAK，接收方对最后正确接收的分组发送ACK</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt22.png"></p><blockquote><p>rdt2.x解决了流量控制问题，以及比特出错的情况，但是丢包情况却没有解决，这也是rdt3.0的任务</p></blockquote></li><li><p>Rdt3.0是具有比特差错和丢包信道的可靠数据传输，为解决丢包问题，发送方等待ACK一段合理的时间，需要倒数计时器来解决这个问题</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/rdt3.png"></p></li><li><p>停等操作使得rdt3.0的效率十分低下，可以使用流水线技术来解决</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/td.png" alt="停等操作效率低"></p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/lsx.png" alt="流水线提高效率"></p></li><li><p>流水线技术中分组丢失之后如何重传</p><ul><li><p>GBN（Go-Back-N）协议：其后分组全部重传</p><ul><li><p>累计ACK：收到ACK（n），则n以及之前的分组都到了</p></li><li><p>若滑动窗口大小为n,则发送方只能连续发送n个数据包，同时，窗口中未被确认的分组数不能超过n</p></li><li><p>对所有的已发送但未确认的分组统一设置一个定时器，从一次流水的最“老”分组开始计时</p></li><li><p>超时（n）,重传分组n和窗口中所有序号大于n的分组</p></li><li><p>GBN滑动窗口大小</p><ul><li>发送端&lt;=2^k-1</li><li>接收端=1</li></ul><blockquote><p>如果收到重复的分组就丢弃重发ACK，如果有分组丢失，但是后面的分组到了，也是将这一部分丢弃，然后重发按序到达的最高序号分组的ACK</p></blockquote></li></ul></li><li><p>SR（选择重传）协议：仅重传该分组</p><ul><li><p>发送方</p><ul><li>从上层收到ACK（n）,若n在[sendbase,sendbase+N-1]范围内，则标记n已经被接受，如果n=sendbase，则将窗口基序号推到下一个未确定序号</li><li>超时（n）:为每一个分组定义计时器，如果n超时，则重传并且重置定时器</li></ul></li><li><p>接收方</p><ul><li>收到n在[sendbase,sendbase+N-1]范围内，发送ACK（n）</li><li>如果收到分组不是连续的，先进行缓存</li><li>按序分组</li></ul><blockquote><p>接收方和发送方窗口都不能超过2^(k-1)</p></blockquote></li></ul></li></ul></li><li><p>TCP报文首部结构</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/tcp.png"></p><ul><li><p>源端口和目的端口各占2字节</p></li><li><p>序号字段占4字节，TCP连接中传送的每一个字节都编上一个序号，序号字段的值则指的是本报文段所发送的数据的第一个字节在整个报文字节流中的序号</p></li><li><p>确认号字段占4字节，是期望收到对方的下一个报文段的数据的第一个字节的序号</p><blockquote><p>和之前不同，之前收到x号分组就发ACK（x），这里收到x号分组就发ACK（x+1）表示期待收到x+1号分组</p></blockquote></li><li><p>首部长度占4bits，它指示以32bit的字为单位的TCP首部长度，若选项字段为空，TCP首部典型长度为20字节</p></li><li><p>保留字段占6bits，该字段是以后所用，目前应该置为0</p></li><li><p>URG（紧急比特）=1时，表示紧急指针字段有效，它告诉系统此报文中有紧急数据，应该尽快传送（一般不使用）</p></li><li><p>ACK（确认比特）=1时，确认号字段有效，=0无效</p></li><li><p>PSH（推送比特）=1时，TCP尽快交付该报文，不等整个缓存都填满再交付</p></li><li><p>RST (复位比特)=1时，表示TCP连接中出现严重差错，必须释放连接，再重新建立连接</p></li><li><p>SYN（同步比特）=1时，这是一个连接请求或者连接接受报文</p></li><li><p>FIN（终止比特）=1时，表明此报文段的数据全部发送完毕，要求释放运输连接</p></li><li><p>窗口字段占两个字节，用来控制对方发送的数据量，单位是字节，TCP连接的一端根据设置的缓存空间大小确定自己的接受窗口大小，然后通知对方来确定对方的发送窗口的上限</p></li><li><p>校验和占两个字节，该字段检验的范围包括首部和数据两个部分，所以计算的时候，<code>需要在TCP报文段的前面加上12字节的伪首部</code></p></li><li><p>紧急指针字段占2个字节，该字段指出在本报文段中的紧急数据的最后一个字号的序号</p></li><li><p>选项字段，长度可变，TCP只规定了一种选项，即最大报文长度（MSS），MSS是TCP报文中数据段的最大长度。</p></li><li><p>填充字段为了使整个首部长度是4字节的整数倍</p></li></ul></li><li><p>RTT=往返时延，SampleRTT=样本RTT（忽略重传），EstimatedRTT=样本RTT的均值，DevRTT=EstimatedRTT和SampleRTT的偏差</p></li><li><p>EstimatedRTT=（1-a）* EstimatedRTT+a * SampleRTT，参考值a=0.125</p></li><li><p>DevRTT=（1-b）* DevRTT+b * |SampleRTT-EstimatedRTT|,参考值b=0.25</p><blockquote><p>第一次计算的时候DevRTT=0.5*SampleRTT</p></blockquote></li><li><p>产生TCP ACK的建议</p><table><thead><tr><th align="center">接受方事件</th><th align="center">TCP接收方动作</th></tr></thead><tbody><tr><td align="center">所期望序号的报文段按序到达，所有在期望序号及其以前的数据都已经被确认</td><td align="center">延迟的ACK，对另一个按序报文段的到达最多等待500ms，如果下一个按序报文段还没有到达，就发送一个ACK</td></tr><tr><td align="center">所期望序号的报文段按序到达，另一个按序报文段等待发送ACK</td><td align="center">立即发送单个累计ACK，以确认两个按序报文段</td></tr><tr><td align="center">比期望序号大的失序报文段到达，检测出数据流中的间隔</td><td align="center">立即发送冗余ACK，指明下一个期待字节的序号</td></tr><tr><td align="center">能部分或者完全填充接收数据间隔的报文段到达</td><td align="center">假如该报文段起始于间隔的低端，则立即发送ACK</td></tr></tbody></table></li></ol><ol start="20"><li><p>快速重传：接收到重复的ACK就重传，不一定非要等到规定的时间间隔</p></li><li><p>TCP通过三次握手建立连接</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/tcp3.png"></p></li><li><p>拥塞控制的方法</p><ul><li>网络辅助的拥塞控制<ul><li>直接网络反馈：路由器以阻塞分组的形式通知发送方网络阻塞</li><li>由接收方的网络反馈：路由器标识从发送方到接收方分组中某个字段来指示拥塞产生，由接收方通知发送方</li></ul></li><li>端到端拥塞控制（目前TCP使用该方法）<ul><li>网络层不为拥塞控制提供任何帮助和支持</li><li>端系统通过对网络行为（丢包或者时延增加）的观测来判断网络是否发生拥塞</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识总结（一）</title>
      <link href="posts/de1fcd2b.html"/>
      <url>posts/de1fcd2b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里将所学的计算机网络的 课程的知识进行归纳总结，预计一篇完不成，所以分篇进行归纳总结，这是自顶向下第七版的第一章，主要是从总体介绍一下计算机网络的模型和接下来会接触到的知识。</p></blockquote><h1 id="一、计算机网络和因特网"><a href="#一、计算机网络和因特网" class="headerlink" title="一、计算机网络和因特网"></a>一、计算机网络和因特网</h1><h2 id="相关问题和知识点总体概述"><a href="#相关问题和知识点总体概述" class="headerlink" title="相关问题和知识点总体概述"></a>相关问题和知识点总体概述</h2><ol><li><p>什么是因特网</p><ul><li>具体构成：基本硬件和软件组件，</li><li>分布式应用服务</li></ul></li><li><p>端系统是主机，通过通信链路和分组交换机连接到一起，通过因特网服务提供商（ISP）接入因特网</p></li><li><p>主机分为客户机和服务器</p></li><li><p>当今因特网内，最著名的分组交换机为<strong>路由器</strong>和<strong>链路层交换机</strong></p></li><li><p>端系统、分组交换机和其他部件都需要运行一系列协议，其中最重要的两个协议是TCP（传输控制协议）和IP（网际协议）。<code>因特网的主要协议统称为TCP/IP</code></p></li><li><p>因特网的分布式应用程序运行在端系统上，分许交换机只是用来加速端系统之间数据交换的，不运行应用程序</p></li><li><p>端系统之间的数据交互通过<strong>套接字接口</strong>来对应交互</p></li><li><p>协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及在报文传输/接收或其他事件方面采取的动作</p></li><li><p>接入网指将端系统物理连接到其边缘路由器的网络，而<code>边缘路由器是端系统到任意其他的远程端系统的路径上的第一台路由器</code>。接入网分为以下几种</p><ul><li>家庭接入：DSL（数字用户线）、电缆、FTTH（光纤到户）、拨号、卫星</li><li>企业（和家庭）接入：以太网、WiFi</li><li>广域无线接入：3G（出书那年4G还没出)、LTE</li></ul></li><li><p>物理媒体分为导引型和非导引型媒体，导引型是电波沿着固体媒体前行，例如光缆、双绞铜线、同轴电缆，非导引型是电波在空气或者外层空间中传播，例如无线局域网和数字卫星频道</p></li><li><p>通过网络链路和交换机移动数据有两种基本方法，电路交换和分组交换</p><ul><li>分组交换：端系统之间彼此交换报文，报文比较长，源端将长报文划分为较小的数据块，每一块成为分组（packet）<ul><li>输入端的机制是存储转发传输，即在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组</li><li>分组交换由于其到端时延是不可预测的，所以不适合实时服务。</li><li>分组交换提供了比电路交换更好的带宽共享；他比电路交换更简单，更有效，实现成本更低</li><li>分组交换时延类型<ul><li>节点处理时延：检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分，除此之外，还需要检查比特级差错。高速路由器的处理时延通常是微秒或更低的数量级</li><li>排队时延：在队列中，当分组在链路上等待传输时，产生排队时延。影响排队时延的因素有：到达该队列的流量强度和性值。实际的排队时延通常在毫秒到微秒级</li><li>传输时延：传输距离/传输速度，得到的是传输时间。这个时间就是将所有的比特推向链路所需要的时间。实际的传输时延通常在毫秒到微秒级</li><li>传播时延：当一个比特被推进链路后，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间时传播时延</li><li>调制/编码时延：量级为几十毫秒。</li><li>节点总时延：以上时延之和</li></ul></li></ul></li><li>电路交换<ul><li>频分复用</li><li>时分复用</li><li>电路交换的效率较低，因为在静默的时候专用电路是空闲的。</li></ul></li></ul></li><li><p><strong>流量强度</strong>：La/R,L是每个分组的长度，单位为比特，a是分组到达队列的平均速率，La是单位时间到达队列的分组总长，R是传输速率，流量强度&gt;1会造成拥塞，所以一般设计的时候流量强度不能大于1</p></li><li><p>丢包：由于队列容量有限，在队列满了以后，路由器会丢弃队尾若干分组</p></li><li><p>瞬时吞吐量：某一时刻目的主机接收到文件的速率</p></li><li><p>平均吞吐量：文件总大小/接收文件总用时</p></li><li><p>协议分层</p><ul><li><code>应用层</code>：应用层是网络应用程序及其应用层协议存留的地方。应用层协议分布在多个端系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息分组。我们将这种位于应用层的信息分组称为报文<ul><li>HTTP（为web文档提供了请求和传送）</li><li>SMTP（提供了电子邮件报文的传输）</li><li>FTP（提供两个端系统之间的文件传送）</li></ul></li><li><code>表示层</code>（七层模型）</li><li><code>会话层</code>（七层模型）</li><li><code>运输层</code>：运输层提供了在应用程序端点之间传送应用报文的服务<ul><li>TCP:向它的应用程序提供了面向连接的服务，这种服务包括了应用层报文向目的地取得确保传递和流量控制（即发送方和接收方的速率匹配）。并将长报文划分为短报文，并提供拥塞控制机制</li><li>UDP：向它的应用程序提供无连接服务。这是一种不提供不必要的服务的服务，不提供可靠性，没有流量控制，也没有拥塞控制</li></ul></li><li><code>网络层</code>：因特网的网络层负责将称为数据报的网络层分组从一台主机移动到另一台主机。源主机中的因特网运输层协议（TCP/UDP）向网络层递交运输层报文段和目的地址<ul><li>IP协议：定义了数据报中的各个字段以及端系统和路由器如何作用于这些字段。仅有一个IP协议，所有具有网络层的因特网组件都必须运行IP协议</li><li>选路协议：数据报根据该路由从源传输到目的地</li></ul></li><li><code>链路层</code>：为了将分组从一个节点移动到路径的下一个节点，网络层必须依靠链路层的服务。特别是在每个节点，网络层将数据报传给链路层，链路层沿着路径将数据报传递给下一个节点。在下一个节点，链路层将数据报上传给网络层。我们将链路层分组称为帧。链路层的任务是将整个帧从一个网络元素移动到邻近的网络元素<ul><li>以太网、wifi、点对点协议（PPP）</li></ul></li><li><code>物理层</code>：物理层的任务是将每一帧中的一个一个比特从一个节点移动到下一个节点。该层中的协议与链路相关，并与链路的实际传输媒体（双绞铜线，单模光纤）有关</li></ul></li><li><p>封装：报文从一层到另一层，另一层会加上该层的首部信息，将报文进行封装然后传送给下一层，应用层报文和运输层首部信息共同构成了运输层报文段 ，运输层报文段封装了应用层报文。运输层向网络层传递报文段，网络层增加了源和目的端系统地址等网络层首部信息，形成了网络层数据报。链路层增加自己的链路层首部信息并创建了链路层帧。每一层分组具有两种类型的字段：首部字段和有效载荷字段</p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/img/jwfz.png" alt="封装"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识体系 </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memorandum备忘录</title>
      <link href="posts/7f157780.html"/>
      <url>posts/7f157780.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近想把之前写的有关tcp服务器的内容做成完整的项目，包含前后端交互和美观的界面，但是关于electron的用法还不是很熟练，就先练习一下，这是一个桌面应用程序，备忘录，可以自己提前设置好任务和开始时间，到了时间就会提醒你，不过只是当天的任务，比较简陋。</p></blockquote><p>项目地址：<a href="https://github.com/fx-zpy/Memorandum">Memorandum</a></p><hr><h1 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h1><h2 id="主界面的设置"><a href="#主界面的设置" class="headerlink" title="主界面的设置"></a>主界面的设置</h2><p>主界面的大小为800x600,由于只是一个简单的备忘录，所有原生菜单也不需要，可以使用<code>frame: false</code>来将原生菜单消除，设置图标使用<code>const iconPath = path.join(__dirname, './src/img/1024x1024.png')</code>来设置图标地址。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>        icon<span class="token operator">:</span> iconPath<span class="token punctuation">,</span>        webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>            backgroundThrottling<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            contextIsolation<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/index.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提醒界面的操作"><a href="#提醒界面的操作" class="headerlink" title="提醒界面的操作"></a>提醒界面的操作</h2><p>这里使用设定时间与当前时间的差来作为是否启用提醒界面的判断标准，同时与渲染进程进行通信。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'setTaskTimer'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> time<span class="token punctuation">,</span> task</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    date<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> timeout <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">createRemindWindow</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createRemindWindow</span><span class="token punctuation">(</span><span class="token parameter">task</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remindWindow<span class="token punctuation">)</span> remindWindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    remindWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        height<span class="token operator">:</span> <span class="token number">450</span><span class="token punctuation">,</span>        width<span class="token operator">:</span> <span class="token number">360</span><span class="token punctuation">,</span>        resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        icon<span class="token operator">:</span> iconPath<span class="token punctuation">,</span>        show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            contextIsolation<span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span><span class="token function">removeMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> size <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getPrimaryDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>workAreaSize    <span class="token keyword">const</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> tray<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> height<span class="token punctuation">,</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> remindWindow<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> yPosition <span class="token operator">=</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'darwin'</span> <span class="token operator">?</span> y <span class="token operator">:</span> y <span class="token operator">-</span> height    remindWindow<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        x<span class="token operator">:</span> size<span class="token punctuation">.</span>width <span class="token operator">-</span> width<span class="token punctuation">,</span>        y<span class="token operator">:</span> yPosition<span class="token punctuation">,</span>        height<span class="token punctuation">,</span>        width    <span class="token punctuation">}</span><span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/remind.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'setTask'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>    remindWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> remindWindow <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        remindWindow <span class="token operator">&amp;&amp;</span> remindWindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="是否更新"><a href="#是否更新" class="headerlink" title="是否更新"></a>是否更新</h2><p>这是桌面应用程序，所以可以使用electron-updater进行更新检测，但是需要将更新的版本放在服务器上，这里可以放在本地服务器，github，或者自己的云服务器上，因为我的云服务器快到期了，所以就不放上去了，可以放在github上自动发布，需要在主进程中加入更新检测的函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//检测更新</span>    autoUpdater<span class="token punctuation">.</span><span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//监听'error'事件</span>    autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//监听'update-available'事件，发现有新版本时触发</span>    autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-available'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'found new version'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//默认会自动下载新版本，如果不想自动下载，设置autoUpdater.autoDownload = false</span>    <span class="token comment">//监听'update-downloaded'事件，新版本下载完成时触发</span>    autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-downloaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            title<span class="token operator">:</span> <span class="token string">'应用更新'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> <span class="token string">'发现新版本，是否更新？'</span><span class="token punctuation">,</span>            buttons<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">buttonIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buttonIndex<span class="token punctuation">.</span>response <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//选择是，则退出程序，安装新版本</span>                autoUpdater<span class="token punctuation">.</span><span class="token function">quitAndInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且需要把版本push到github上，但是因为本来这个项目就是用来练手的，所以可以但没必要。</p><h1 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h1><h2 id="主操作界面"><a href="#主操作界面" class="headerlink" title="主操作界面"></a>主操作界面</h2><blockquote><p>主操作界面分为背景彩带和功能实现按钮和textarea等。</p></blockquote><h3 id="背景动态彩带"><a href="#背景动态彩带" class="headerlink" title="背景动态彩带"></a>背景动态彩带</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"Ribbons"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _w <span class="token operator">=</span> window<span class="token punctuation">,</span>            _b <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>            _d <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">random</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">screenInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _w<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> _d<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> _b<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _w<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> _d<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> _b<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                scrollx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _w<span class="token punctuation">.</span>pageXOffset <span class="token operator">||</span> _d<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> _b<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>_d<span class="token punctuation">.</span>clientLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                scrolly <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _w<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> _d<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> _b<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>_d<span class="token punctuation">.</span>clientTop <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                width<span class="token operator">:</span> width<span class="token punctuation">,</span>                height<span class="token operator">:</span> height<span class="token punctuation">,</span>                ratio<span class="token operator">:</span> width <span class="token operator">/</span> height<span class="token punctuation">,</span>                centerx<span class="token operator">:</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                centery<span class="token operator">:</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                scrollx<span class="token operator">:</span> scrollx<span class="token punctuation">,</span>                scrolly<span class="token operator">:</span> scrolly            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">mouseInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> screen <span class="token operator">=</span> <span class="token function">screenInfo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>                mousex <span class="token operator">=</span> e <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageX <span class="token operator">||</span> e<span class="token punctuation">.</span>clientX <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                mousey <span class="token operator">=</span> e <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageY <span class="token operator">||</span> e<span class="token punctuation">.</span>clientY <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                mousex<span class="token operator">:</span> mousex<span class="token punctuation">,</span>                mousey<span class="token operator">:</span> mousey<span class="token punctuation">,</span>                centerx<span class="token operator">:</span> mousex <span class="token operator">-</span> screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                centery<span class="token operator">:</span> mousey <span class="token operator">-</span> screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">Point</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token operator">:</span> Point<span class="token punctuation">,</span>            <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">copy</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">point</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> point<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">multiply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">*=</span> x <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">*=</span> y <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">divide</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">/=</span> x <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">/=</span> y <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">subtract</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-=</span> y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">clampX</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">clampY</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">flipX</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">flipY</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">Factory</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_sto <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_scroll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_options <span class="token operator">=</span> <span class="token punctuation">{</span>                colorSaturation<span class="token operator">:</span> <span class="token string">"80%"</span><span class="token punctuation">,</span>                colorBrightness<span class="token operator">:</span> <span class="token string">"60%"</span><span class="token punctuation">,</span>                colorAlpha<span class="token operator">:</span> <span class="token number">0.65</span><span class="token punctuation">,</span>                colorCycleSpeed<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>                verticalPosition<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>                horizontalSpeed<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>                ribbonCount<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                strokeSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                parallaxAmount<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span>                animateSections<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_onDraw <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onDraw</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_onResize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onResize</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_onScroll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onScroll</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Factory</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token operator">:</span> Factory<span class="token punctuation">,</span>            <span class="token function-variable function">setOptions</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"display"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"position"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"fixed"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"margin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"padding"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"border"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"outline"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"left"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"top"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"z-index"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"background-color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"#ffffff"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"bgCanvas"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>colorAlpha<span class="token punctuation">;</span>                    <span class="token comment">// 这里可以设置是否随着窗口的滚动而滚动</span>                    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onResize<span class="token punctuation">)</span><span class="token punctuation">;</span>                    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"scroll"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 这里设置添加的位置</span>                    <span class="token keyword">var</span> body_ <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    body_<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Canvas Context Error: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">addRibbon</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> dir <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token string">"right"</span> <span class="token operator">:</span> <span class="token string">"left"</span><span class="token punctuation">,</span>                    stop <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>                    hide <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>                    min <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> hide<span class="token punctuation">,</span>                    max <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">+</span> hide<span class="token punctuation">,</span>                    movex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                    movey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                    startx <span class="token operator">=</span> dir <span class="token operator">===</span> <span class="token string">"right"</span> <span class="token operator">?</span> min <span class="token operator">:</span> max<span class="token punctuation">,</span>                    starty <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(top|min)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>verticalPosition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    starty <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> hide<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(middle|center)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>verticalPosition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    starty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(bottom|max)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>verticalPosition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    starty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">-</span> hide<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">var</span> ribbon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    point1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> starty<span class="token punctuation">)</span><span class="token punctuation">,</span>                    point2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> starty<span class="token punctuation">)</span><span class="token punctuation">,</span>                    point3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                    color <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    delay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>stop <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    stop<span class="token operator">--</span><span class="token punctuation">;</span>                    movex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>horizontalSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span>                    movey <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">*</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    point3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    point3<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">===</span> <span class="token string">"right"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        point3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>movex<span class="token punctuation">,</span> movey<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>point2<span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">===</span> <span class="token string">"left"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        point3<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>movex<span class="token punctuation">,</span> movey<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>point2<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ribbon<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        point1<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>point1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>                        point2<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>point2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>                        point3<span class="token operator">:</span> point3<span class="token punctuation">,</span>                        color<span class="token operator">:</span> color<span class="token punctuation">,</span>                        delay<span class="token operator">:</span> delay<span class="token punctuation">,</span>                        dir<span class="token operator">:</span> dir<span class="token punctuation">,</span>                        alpha<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        phase<span class="token operator">:</span> <span class="token number">0</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    point1<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    point2<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>point3<span class="token punctuation">)</span><span class="token punctuation">;</span>                    delay <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>                    color <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>colorCycleSpeed<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ribbon<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">_drawRibbonSection</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">.</span>phase <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> section<span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">.</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        section<span class="token punctuation">.</span>phase <span class="token operator">+=</span> <span class="token number">0.02</span><span class="token punctuation">;</span>                        section<span class="token punctuation">.</span>alpha <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>phase<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>                        section<span class="token punctuation">.</span>alpha <span class="token operator">=</span> section<span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> section<span class="token punctuation">.</span>alpha<span class="token punctuation">;</span>                        section<span class="token punctuation">.</span>alpha <span class="token operator">=</span> section<span class="token punctuation">.</span>alpha <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> section<span class="token punctuation">.</span>alpha<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>animateSections<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">var</span> mod <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> section<span class="token punctuation">.</span>phase <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">.</span>dir <span class="token operator">===</span> <span class="token string">"right"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                section<span class="token punctuation">.</span>point1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                section<span class="token punctuation">.</span>point2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                section<span class="token punctuation">.</span>point3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                section<span class="token punctuation">.</span>point1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                section<span class="token punctuation">.</span>point2<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                section<span class="token punctuation">.</span>point3<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            section<span class="token punctuation">.</span>point1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>                            section<span class="token punctuation">.</span>point2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>                            section<span class="token punctuation">.</span>point3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        section<span class="token punctuation">.</span>delay <span class="token operator">-=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>colorSaturation<span class="token punctuation">,</span>                        l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>colorBrightness<span class="token punctuation">,</span>                        c <span class="token operator">=</span> <span class="token string">"hsla("</span> <span class="token operator">+</span> section<span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> section<span class="token punctuation">.</span>alpha <span class="token operator">+</span> <span class="token string">" )"</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>parallaxAmount <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_scroll <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>parallaxAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>point1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> section<span class="token punctuation">.</span>point1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>point2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> section<span class="token punctuation">.</span>point2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>point3<span class="token punctuation">.</span>x<span class="token punctuation">,</span> section<span class="token punctuation">.</span>point3<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> c<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>strokeSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>strokeSize<span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> c<span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">"round"</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">_onDraw</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> ribbon <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>                        numSections <span class="token operator">=</span> ribbon<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                        numDone <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> numSections<span class="token punctuation">;</span> <span class="token operator">++</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_drawRibbonSection</span><span class="token punctuation">(</span>ribbon<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            numDone<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>numDone <span class="token operator">&gt;=</span> numSections<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_ribbons<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>ribbonCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addRibbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onDraw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">_onResize</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> screen <span class="token operator">=</span> <span class="token function">screenInfo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">=</span> screen<span class="token punctuation">.</span>width<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">=</span> screen<span class="token punctuation">.</span>height<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>_context<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_options<span class="token punctuation">.</span>colorAlpha<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">_onScroll</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> screen <span class="token operator">=</span> <span class="token function">screenInfo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_scroll <span class="token operator">=</span> screen<span class="token punctuation">.</span>scrolly<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Ribbons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item tab-manage nav-active enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>待办事项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item tab-manage enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add tab-manage enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>×<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-manage content-active<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>今日未完成任务清单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tasks task-todo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-manage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>今日已完成任务清单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tasks task-finished<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task-text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>写作业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>task-text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>写作业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>你已经完成任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keep-times<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>次，继续加油哦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-manage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>新建任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>taskName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>设置任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>taskName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enable-click<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>taskTime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>设置时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>taskTime<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit-task enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              确定            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标签CSS样式"><a href="#标签CSS样式" class="headerlink" title="标签CSS样式"></a>标签CSS样式</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">*</span> <span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">html,    body</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">body</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">-webkit-app-region</span><span class="token punctuation">:</span> drag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.enable-click</span> <span class="token punctuation">{</span>        <span class="token property">-webkit-app-region</span><span class="token punctuation">:</span> no-drag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.nav</span> <span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 50px 0<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #f8f8f8<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #333333<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.date</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #31c27c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.nav-text</span> <span class="token punctuation">{</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.nav-text&gt;.item</span> <span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 8px 20px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.nav-text&gt;.item.nav-active</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #6931c2<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.add</span> <span class="token punctuation">{</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.add-icon</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 28px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #aa31c2<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.content</span> <span class="token punctuation">{</span>        <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">padding-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.close</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.content-manage</span> <span class="token punctuation">{</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.tasks</span> <span class="token punctuation">{</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 370px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.task-item</span> <span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 30px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.task-text</span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.btns</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> #03a9f4<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.flag-icon</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./img/flag.png'</span><span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>        <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.form-item</span> <span class="token punctuation">{</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.form-item input</span> <span class="token punctuation">{</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.submit-task</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #aa31c2<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 6px 15px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.content-active</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">.keep-times</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> #4031c2<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 4px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">h2</span> <span class="token punctuation">{</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token selector">p</span> <span class="token punctuation">{</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="功能实现-1"><a href="#功能实现-1" class="headerlink" title="功能实现"></a>功能实现</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>            ipcRenderer        <span class="token punctuation">}</span> <span class="token operator">=</span> electron        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span>        <span class="token keyword">const</span> tabManage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.tab-manage'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> contentManage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.content-manage'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> taskTodo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.task-todo'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> taskFinished <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.task-finished'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> keepTimesDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.keep-times'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> closeDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.close'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nowTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">/** task data structure         * name,         * time         **/</span>        <span class="token comment">//localStorage存储数据</span>        <span class="token keyword">let</span> loginTime <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'loginTime'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> tasksTodo <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'tasksTodo'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> tasksFinished <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'tasksFinished'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> keepTimes <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'keepTimes'</span><span class="token punctuation">)</span>        tasksTodo <span class="token operator">=</span> tasksTodo <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        tasksFinished <span class="token operator">=</span> tasksFinished <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tasksFinished<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        keepTimes <span class="token operator">=</span> keepTimes <span class="token operator">?</span> keepTimes <span class="token operator">:</span> <span class="token number">0</span>        <span class="token comment">//判断上次登录时间，如果是今天，则任务，否则清空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loginTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            loginTime <span class="token operator">=</span> nowTime        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> loginD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>loginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> loginD<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> nowTime <span class="token operator">-</span> loginTime <span class="token operator">&gt;=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tasksFinished <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                tasksTodo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksFinished'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksFinished<span class="token punctuation">)</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksTodo'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//初始化</span>        <span class="token comment">//填入日期</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>        <span class="token function">genTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">genFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//绑定事件</span>        tabManage<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token function">activeTab</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                <span class="token function">activeContent</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        taskTodo<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target            <span class="token keyword">const</span> index <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-index"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                keepTimes <span class="token operator">=</span> <span class="token operator">+</span>keepTimes <span class="token operator">+</span> <span class="token number">1</span>                tasksFinished<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>                tasksTodo<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksTodo'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">)</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksFinished'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksFinished<span class="token punctuation">)</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'keepTimes'</span><span class="token punctuation">,</span> keepTimes<span class="token punctuation">)</span>                <span class="token function">genFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">genTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">activeTab</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">activeContent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tasksTodo<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksTodo'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">activeTab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">activeContent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">genTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        closeDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'mainWindow:close'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//新建任务</span>        <span class="token keyword">const</span> taskName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#taskName'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> taskTime <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#taskTime'</span><span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.submit-task'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> name <span class="token operator">=</span> taskName<span class="token punctuation">.</span>value<span class="token punctuation">,</span>                time <span class="token operator">=</span> taskTime<span class="token punctuation">.</span>value            tasksTodo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                name<span class="token operator">:</span> name<span class="token punctuation">,</span>                time<span class="token operator">:</span> time            <span class="token punctuation">}</span><span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'tasksTodo'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tasksTodo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>time<span class="token punctuation">)</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'setTaskTimer'</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">genTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">activeTab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">activeContent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">genTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> todoHtml <span class="token operator">=</span> <span class="token string">''</span>            tasksTodo<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                todoHtml <span class="token operator">+=</span>                    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li class="task-item"&gt;              &lt;span class="task-text"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;nbsp;&amp;nbsp;&amp;nbsp; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;/span&gt;              &lt;span&gt;                &lt;span class="btns finish enable-click" data-index="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"&gt;完成&lt;/span&gt;                &lt;span class="btns delete enable-click" data-index="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"&gt;删除&lt;/span&gt;              &lt;/span&gt;            &lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            taskTodo<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> todoHtml        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">genFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> finishHtml <span class="token operator">=</span> <span class="token string">''</span>            tasksFinished<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                finishHtml <span class="token operator">+=</span>                    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li class="task-item"&gt;              &lt;span class="task-text"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;              &lt;span class="flag-icon"&gt;&lt;/span&gt;            &lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            taskFinished<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> finishHtml            keepTimesDom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> keepTimes        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">activeTab</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tabManage<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tabEl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                tabEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'nav-active'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            tabManage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'nav-active'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">activeContent</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            contentManage<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">taskEl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                taskEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'content-active'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            contentManage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'content-active'</span><span class="token punctuation">)</span>            taskName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>            taskTime<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提醒界面"><a href="#提醒界面" class="headerlink" title="提醒界面"></a>提醒界面</h2><p>提醒界面会在时间到达你预设的时间进行提醒。会出现在电脑的右下角，在你设置好时间之后，你关掉主界面也不会停止该进程，在电脑右下角的小图标里面也会有该程序在运行的标志，你可以右键退出。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">.reminder</span> <span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> gold        <span class="token punctuation">}</span>                <span class="token selector">.background</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>3px<span class="token punctuation">)</span> <span class="token function">opacity</span><span class="token punctuation">(</span>0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">.close</span> <span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close enable-click<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>okk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reminder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>background<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>        ipcRenderer    <span class="token punctuation">}</span> <span class="token operator">=</span> electron    <span class="token keyword">const</span> randomIndex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">//设置提醒的背景图</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.background'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./img/1.gif</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'setTask'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> task</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.reminder'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">小助手提醒您，您该完成&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;啦(ง •_•)ง</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> closeDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.close'</span><span class="token punctuation">)</span>    closeDom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'remindWindow:close'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="康康效果"><a href="#康康效果" class="headerlink" title="康康效果"></a>康康效果</h1><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/blog/memorandum.png" alt="主界面效果图"></p><p><img src="https://cdn.jsdelivr.net/gh/fx-zpy/PictureBed@main/blog/remind.png" alt="提醒界面"></p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>打包的过程是曲折的，凌晨3点还在打包，诶，这里基本上就是遇到bug就copy一下，然后google，接下来就会出现新的bug，o(*≧▽≦)ツ┏━┓</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> HTML </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法初练</title>
      <link href="posts/6d8ecaef.html"/>
      <url>posts/6d8ecaef.html</url>
      
        <content type="html"><![CDATA[<h2 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>这是一道简单的greedy题目，题目描述如下，假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这里读完题目之后可以发现，关键条件为s[j] &gt;= g[i]，也就是寻找满足这个条件的最低s[j]即可满足g[i]，那么首先可以将孩子满足度和饼干能量度进行排序，然后遍历寻找到满足条件的即可，这里我没用C语言，因为对两个数组进行排序太麻烦了，这里主要是为了锻炼自己的算法，所以使用了go语言，正好也复习一下go语言，直接调用sort来进行排序，代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>g <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    count<span class="token punctuation">,</span>gl<span class="token punctuation">,</span>sl<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gl<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>sl<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token operator">&lt;</span>sl<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">{</span>            j<span class="token operator">++</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> j<span class="token operator">&lt;</span>sl<span class="token punctuation">{</span>            count<span class="token operator">++</span>            j<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我运行的时间太慢了，因为我是以孩子的需求为上，优先考虑了孩子的需求，看了一下别人的思路，可以直接从饼干的角度出发，能分配就分配，不能继续下一个孩子，这样会快一点。</p><h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。说明：你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="/medias/blog/1.jpg" alt="柱形图"></p><pre class="line-numbers language-none"><code class="language-none">输入：[1,8,6,2,5,4,8,3,7]输出：49 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><h4 id="第一次错误"><a href="#第一次错误" class="headerlink" title="第一次错误"></a>第一次错误</h4><p>错误的原因的是超出时间限制，我读完题之后就想到了一个大家都会想到的办法，就是使用双层循环，遍历寻找最大的面积，可是却超时了，这就说明了<del>测试用例刁难人(T^T)</del>算法的重要性。代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    max<span class="token operator">:=</span><span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token operator">:=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">{</span>            h<span class="token operator">:=</span><span class="token function">Min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            max<span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>h<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重新构思"><a href="#重新构思" class="headerlink" title="重新构思"></a>重新构思</h4><p>错误以后我看了一下官方的题解寻找思路，官方是使用双指针来指向前后两个位置，并且移动来寻找最大的面积处，双指针的思路其实不难，就是初始的时候两个指针分别指向第一个数字和最后一个数字，然后计算出面积值，接下来移动较小的那一个，因为两者是相互靠近，距离缩短，如果面积想要变大，肯定是需要最短边长变大，如果移动较大的那一边，那么最短边只会和原来相同甚至更小，这样面积只会越来越小，所以移动较小的那个指针，最终等到两个指针相遇就停止，改进后的代码如下，这次时间没有超出限制，还击败了98%的使用go语言解题的人(叉腰.jpg)。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    max<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">{</span>        h<span class="token operator">:=</span><span class="token function">Min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span>        max<span class="token operator">=</span><span class="token function">Max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>h<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l<span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            r<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一道题较为简单，但是仍有优化的空间，第二题也是学会了使用双指针来解决问题，而不用暴力求解，这样只会被测试样例教做人(-_-)。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> GO </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode几道dp中等题</title>
      <link href="posts/db0f04bc.html"/>
      <url>posts/db0f04bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题和之前所做的合唱队形有点像，但是这不是求解最大增序列，而是增减交替的序列，首选还是一个一个分析，如果所给序列的长度只有一，那么返回的子序列的长度也是一，如果序列的长度超过一个，就可以使用两个变量up,down来计算上升和下降的个数，这里的增加数目是在对方的基础上进行的，因为要计算最长的子序列而不是最长增序列或者减序列。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> up<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> down<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            up<span class="token operator">=</span>down<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            down<span class="token operator">=</span>up<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>up<span class="token operator">&gt;</span>down<span class="token punctuation">)</span><span class="token operator">?</span>up<span class="token operator">:</span>down<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。你可以认为每种硬币的数量是无限的。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这是一个很经典的背包问题，背包是固定的，物品是多个的，我们只要求把背包填满就好了，这里使用动态规划，或者DFS加剪枝都可以，我使用的是DP，至于为什么不用DFS，因为<del>不会</del>我写完了看题解才发现可以使用这种方法，这里可以使用一个数组dp来接收局部最优解。dp[0]初始化0，其他初始化足够大的数，因为求最少的数目，我这里初始化为100000，只需要满足测试用例的要求即可。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span><span class="token operator">*</span> dp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>coinsSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">?</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">&gt;</span>amount<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里也copy一下其他人的题解，关于使用DFS和BFS来求解的。实属强者，LeetCode的算法大佬太多了，膜拜。</p><p>以下为DFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">:</span>    def <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span><span class="token operator">:</span>        coins<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token class-name">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>                def <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">if</span> amount <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>                self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>res<span class="token punctuation">,</span> num<span class="token punctuation">)</span>                <span class="token keyword">return</span>             <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>                # 剩下的最大值都不够凑出来了                <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>res <span class="token operator">-</span> num<span class="token punctuation">)</span> <span class="token operator">*</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> amount<span class="token operator">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">if</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> amount<span class="token operator">:</span>                    <span class="token keyword">continue</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> amount <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>                    <span class="token keyword">return</span> self<span class="token punctuation">.</span>res <span class="token keyword">if</span> self<span class="token punctuation">.</span>res <span class="token operator">!=</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为BFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">:</span>    def <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span><span class="token operator">:</span>        from collections <span class="token keyword">import</span> <span class="token namespace">deque</span>        queue <span class="token operator">=</span> <span class="token function">deque</span><span class="token punctuation">(</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">)</span>        step <span class="token operator">=</span> <span class="token number">0</span>        visited <span class="token operator">=</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token operator">:</span>            n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>            <span class="token keyword">for</span> _ in <span class="token function">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>                tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>                    <span class="token keyword">return</span> step                <span class="token keyword">for</span> coin in coins<span class="token operator">:</span>                    <span class="token keyword">if</span> tmp <span class="token operator">&gt;=</span> coin and tmp <span class="token operator">-</span> coin not in visited<span class="token operator">:</span>                        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> coin<span class="token punctuation">)</span>                        queue<span class="token punctuation">.</span><span class="token function">appendleft</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> coin<span class="token punctuation">)</span>            step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个正整数 <em>n</em>，将其拆分为<strong>至少</strong>两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这里需要注意审题， 我刚开始读题不仔细，以为是分解成两个正整数，兴致勃勃的开始做题，不到两分钟代码就写好了，心里不禁想到，中等题就这，结果不小心瞟到了题目的要求，<strong>至少</strong>，顿时麻了，赶紧删掉了自己刚写好的代码，并且内心说了句，<del>私密马赛</del>。是我愚蠢了，那么重新分析，既然是至少，那么就不限制分解成2个了，但是想了想，不太好解，如果自底向上，往上也不好分析，因为这个不像之前的蜜蜂和走楼梯，后一个的问题只依赖于前一个和前两个问题的最优解。这里看了一下别人的思路，发现宝藏，一个人的思路是这样，根据数学的规律来解这道题，可以大大简化题目的复杂度，求解y=(n/x)^x的最大解，并且最大解的时候x的值为多少，最后算出来x=e的时候y最大，所以只要多分解出e得到的成绩就会越大，但是题目要求为正整数，所以从2和3中选择，这里随便取一个n实验一下，比如12=2+2+2+2+2+2=3+3+3+3,2^6=64,3^4=81，很显然，3比2具有更大的乘积，所以就将所给的n尽量分解成3,能够得到最大的乘积。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">-=</span><span class="token number">3</span><span class="token punctuation">;</span>            a<span class="token operator">*=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dp的思想还是局部最优解的推进，但是可以使用数学知识来简化问题。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go实现简单群聊服务器</title>
      <link href="posts/4b92e806.html"/>
      <url>posts/4b92e806.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP群聊服务器实现"><a href="#TCP群聊服务器实现" class="headerlink" title="TCP群聊服务器实现"></a>TCP群聊服务器实现</h2><p>之前实现了TCP服务器，可以和客户端通信，这次进行了扩展，将多个客户端的通信集中到一起，形成群聊系统，服务器的主体代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">type</span> client <span class="token keyword">struct</span> <span class="token punctuation">{</span>c    <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token comment">//发送数据的管道</span>name <span class="token builtin">string</span>      <span class="token comment">//姓名</span>addr <span class="token builtin">string</span>      <span class="token comment">//地址</span><span class="token punctuation">}</span><span class="token keyword">var</span> onlinemap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>client <span class="token comment">//保存在线用户</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>onlinemap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>client<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>message <span class="token comment">//如果message通道没有消息就阻塞</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cli <span class="token operator">:=</span> <span class="token keyword">range</span> onlinemap <span class="token punctuation">{</span>cli<span class="token punctuation">.</span>c <span class="token operator">&lt;-</span> msg <span class="token comment">//遍历map，给每个成员都发送信息，相当于广播</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">writemsgtoclient</span><span class="token punctuation">(</span>cli client<span class="token punctuation">,</span> ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> cli<span class="token punctuation">.</span>c <span class="token punctuation">{</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli client<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buf <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> cli<span class="token punctuation">.</span>addr <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> cli<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dispose</span><span class="token punctuation">(</span>ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取客户端的网络地址</span>cliaddr <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建一个结构体默认用户名和网络地址一样</span>cli <span class="token operator">:=</span> client<span class="token punctuation">{</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cliaddr<span class="token punctuation">,</span> cliaddr<span class="token punctuation">}</span>onlinemap<span class="token punctuation">[</span>cliaddr<span class="token punctuation">]</span> <span class="token operator">=</span> cli <span class="token comment">//将结构体添加到map</span><span class="token comment">//新开一个协程，给当前客户发送信息</span><span class="token keyword">go</span> <span class="token function">writemsgtoclient</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> ac<span class="token punctuation">)</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"login"</span><span class="token punctuation">)</span>cli<span class="token punctuation">.</span>c <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"I am here"</span><span class="token punctuation">)</span>isexit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">//新建协程，接受用户发送的数据</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>isexit <span class="token operator">&lt;-</span> <span class="token boolean">true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>msg <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"who"</span> <span class="token punctuation">{</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"user list:\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tmp <span class="token operator">:=</span> <span class="token keyword">range</span> onlinemap <span class="token punctuation">{</span>msg <span class="token operator">=</span> tmp<span class="token punctuation">.</span>addr <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\n"</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"rename"</span> <span class="token punctuation">{</span>name <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>cli<span class="token punctuation">.</span>name <span class="token operator">=</span> nameonlinemap<span class="token punctuation">[</span>cliaddr<span class="token punctuation">]</span> <span class="token operator">=</span> clifmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rename successfully"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>isexit<span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span>onlinemap<span class="token punctuation">,</span> cliaddr<span class="token punctuation">)</span>message <span class="token operator">&lt;-</span> <span class="token function">makemsg</span><span class="token punctuation">(</span>cli<span class="token punctuation">,</span> <span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//开启循环，一直开启协程</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开一个协程，转发信息</span><span class="token keyword">go</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//主协程，循环阻塞等待用户连接</span><span class="token keyword">for</span> <span class="token punctuation">{</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token keyword">go</span> <span class="token function">dispose</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本次服务器开启的端口依旧是本地的4000端口，每个客户端可以修改自己的名称，默认的名称是地址，同时上线和退出都会有login和logout的提示。如果输入的是who那么就会给出当前在线的用户列表。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里我单开一个窗口作为旁观者可以观看到其他人发的信息，俗称<del>摸鱼</del>窥屏怪。其他的我开了三个用户，分别重新命名为zpy,xsg,hs他们进行聊天。</p><p><img src="/medias/blog/14.png" alt="窥屏怪视角"></p><p><img src="/medias/blog/15.png" alt="zpy视角"></p><p><img src="/medias/blog/16.png" alt="xsg视角"></p><p>这边hs的视角忘记截图了，不过有前两个人的视角应该就够了，这个群聊做的很简单，界面布局也没有什么设计，包括敏感词汇屏蔽和@功能实现都还没有做，后续随缘更新功能和界面，这次只是为了能够实现聊天的主题功能。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go学习笔记之tcp服务器</title>
      <link href="posts/db7cd9a0.html"/>
      <url>posts/db7cd9a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="单程TCP服务器"><a href="#单程TCP服务器" class="headerlink" title="单程TCP服务器"></a>单程TCP服务器</h1><p>这是只接受来自客户端的一次通信就停止的服务器，也是后面并发服务器的基础知识，服务器的构成代码是用go语言编写，如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span> <span class="token comment">//监听本地4000端口</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在用户连接之前阻塞</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span> <span class="token comment">//分配一个4096字节的缓冲区来接收用户的数据</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>  <span class="token comment">//返回数据长度和错误信息</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data="</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">defer</span> ac<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用net里面的函数listen对本地4000端口进行监听，为啥是4000端口，其实端口号无所谓，4000端口是每次更新博客的时候本地调试的端口，因为经常能看<del>色图</del>博客，所以使用该端口，这里接受信息的缓冲区的大小为4096，也就是4kb，来自4000端口发送的数据大小不能超过该大小，使用的时候不会报错，但是服务器端只会截取规定缓冲区的大小，我实验过使用的大小为4的缓冲区来接受超过10个字节的数据，最后只是截取到前四个字节的数据就结束了。这里使用netcat下的一个可执行程序nc来进行数据的发送。分配好端口号之后就发送数据，同时服务器端接受到数据之后就停止了，因为本身就是一个单程的服务器。</p><p><img src="/medias/blog/9.png" alt="服务器端接收数据"></p><h1 id="并发服务器"><a href="#并发服务器" class="headerlink" title="并发服务器"></a>并发服务器</h1><p>并发服务器支持对多个客户端进行数据的传送与接收。</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器端的代码在之前单程服务器的基础上进行改进，增加协程来处理与客户端的交互。主体代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Dispose</span><span class="token punctuation">(</span>ac net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>add <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//处理客户端的端口号</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token string">" connected successfully"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> ac<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ac<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token comment">//接收客户端数据</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from client is"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//打印接收到数据</span><span class="token keyword">if</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"exit"</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>ret <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sb"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span> <span class="token comment">//将数据中的不文明词汇和谐，这里只处理了sb这个经常出现的词汇</span>ac<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>                                       <span class="token comment">//返回数据</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span> <span class="token comment">//监听本地4000端口</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在用户连接之前阻塞</span><span class="token keyword">for</span> <span class="token punctuation">{</span>ac<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">go</span> <span class="token function">Dispose</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过协程对每一个请求的客户端的数据都能进行处理，在实际工作中服务器端接收到客户端的数据之后可以进行很多处理，我这里仅仅进行了对敏感词汇sb的和谐，并把数据重新发回给客户端。上述代码的停止条件是输入exit，这里的处理仅仅适用于nc测试，因为nc测试中我们输入了exit回车之后换行也一并输入了进来，所以上述代码中判断条件为string(buffer[:len-1]) == “exit”，自编客户端程序进行测试的时候由于编写者的不同，数据的处理可能不同。需要根据实际情况进行修改。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>这里我开了两个进程来测试服务器端能否实现并发，结果发现可以。输入exit客户端也能顺利的结束进程。</p><p><img src="/medias/blog/10.png" alt="测试并发"></p><p><img src="/medias/blog/11.png" alt="测试结束"></p><h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><p>这里也可以自编客户端程序进行测试，主动连接对应的端口号，对其进行数据的交互。这里我写了一个客户端程序进行测试，也是使用go语言进行编写。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置连接的端口号</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开启协程，接收服务器端的回复</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token comment">//读取数据</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data from server is"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//给服务器端发送数据</span>se <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span> <span class="token comment">//从键盘读取内容</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>se<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//将输入的信息发送给服务器</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试截图如下</p><p><img src="/medias/blog/12.png" alt="客户端程序测试"></p><p>注意这里输入exit不能退出，因为客户端输入的时候输入回车，字符串后面会跟着两个字符，回车\r，换行\n，所以服务器端需要进行修改才能退出客户端程序，即将服务器端的判断条件改为string(buffer[:len-1]) == “exit”。但是这样感觉不方便，可以在测试的客户端输入条件判断一下，为exit就退出。当然这些都是小细节。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单程和并发区别在于是否使用了协程，本次测试也用到了<del>脑残</del>nc和客户端程序。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合唱队形&amp;&amp;过河卒</title>
      <link href="posts/9c48d863.html"/>
      <url>posts/9c48d863.html</url>
      
        <content type="html"><![CDATA[<h1 id="合唱队形"><a href="#合唱队形" class="headerlink" title="合唱队形"></a>合唱队形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>N位同学站成一排，音乐老师要请其中的(N?K)位同学出列，使得剩下的K位同学排成合唱队形。合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1,2,…,K，他们的身高分别为T1,T2,…,TK。身高满足T1&lt;…<ti>Ti+1&gt;…&gt;TK(1≤i≤K)。你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。输入有两行，第一行是一个整数N(2≤N≤100)，表示同学的总数。第二行有N个整数，用空格分隔，第i个整数Ti(130≤Ti≤230)是第i位同学的身高(厘米)。输出最少需要同学出列的个数。</ti></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="第一次错误尝试"><a href="#第一次错误尝试" class="headerlink" title="第一次错误尝试"></a>第一次错误尝试</h3><p>第一次我的思路是每次标定一个人，从他开始依次向左和右进行筛选，如果有后一个比前一个高的情况出现，就判定前一个得出队列，当然我还没有意识到问题的严重性，连调试都没做就去提交了，结果可想而知，10个测试点就过了一个，以下是第一次的代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> min<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">99</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> a <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a <span class="token operator">=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> a <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>min <span class="token operator">=</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误以后我自己进行了分析，发现，如果在我选定的那一个人的右边第一位是他右边最低的，而从右边第二位开始依次递减，那么我的算法就把从第二位开始的人全部踢出去了这显然不符合最少的规则，正确的是只需要把右边第一位踢出去就可以了。</p><h3 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h3><p>经过分析以后，我开始转换思路，依旧选定一个人做参照，将合唱队分成两个部分，然后分别从最左边和最右边向中间求最多人的增序列，这样踢出去的人就最少，两个数组分别存储左右的最大增序列的人数，但是注意，被当做参照物的那个人算了两次，所以要减去1。代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> uflag<span class="token punctuation">,</span>dflag<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>uflag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>uflag <span class="token operator">=</span> uflag <span class="token operator">&gt;</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> uflag <span class="token operator">:</span> u<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> uflag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dflag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>dflag <span class="token operator">=</span> dflag <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> dflag <span class="token operator">:</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dflag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功通过了OJ。</p><h1 id="过河卒"><a href="#过河卒" class="headerlink" title="过河卒"></a>过河卒</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。棋盘用坐标表示，A点(0,0)、B点(n,m)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。输入一行四个正整数，分别表示B点坐标和马的坐标。坐标不超过（20,20）。输出一个整数，表示所有的路径条数。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p><del>思路就是没有思路</del>题目给我的第一印象就是好难啊，我把题目给的一个示例在草稿纸上人工走了一遍，但是没有思路，如果没有这匹该死的马，那将简单多了，就像之前的小蜜蜂和爬楼梯一样，但是可惜没有，一个马最多限制了九个点无法通过，有可能马的位置离边境较近，9个点中有部分不在（0,0）和（n,m）为顶点组成的矩形里面，我的初始想法是先求出所有的路径，然后把路径中包含马的控制点的路径排除，这个想法我没去实现，因为我在大脑里面过了一下，预感时空限制可能通不过OJ，于是打开了谷歌，搜索过河卒（bushi。看了别人的思路之后感觉豁然开朗，路径条数的dp还是我之前说的那样，每到每一个点的个数是上面点和左边点的个数之和，这里我用了一个二维数组，初始化都为0，将马的控制点设置为-1（之后再调整为0），每个数组元素的值就是到该点的路径条数之和，再用dp到(n,m)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">long</span> <span class="token keyword">long</span> path<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> mx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> my<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>path<span class="token punctuation">[</span>x <span class="token operator">+</span> mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> my<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>path<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> path<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这么简单的题目我都能卡住，我太菜了o(╥﹏╥)o，CSP危。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向简单题之dotnetcrack</title>
      <link href="posts/a651b15e.html"/>
      <url>posts/a651b15e.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>这道题是我的一个同学转了安全以后发给我让我帮忙做一下，但是其实本来我也没有接触多少逆向的知识，但是还是打算尝试一下，题目是dotnetcrack，打开可执行程序以后，弹出一个弹窗如下</p><img src="/medias/blog/1.png" alt="弹窗" style="zoom:50%;"><p>尝试输入一串字符串，发现报错。</p><img src="/medias/blog/2.png" alt="报错" style="zoom:50%;"><p>学习了一下这方面的知识以后，也是使用了一款反编译工具ILSpy将程序进行反编译，找到判断的关键代码，</p><img src="/medias/blog/3.png" alt="反编译后代码" style="zoom: 50%;"><p>如图可以发现其判断的语句是”2yyUjXprc1+2TwAbbVU6eQ==” == Encode(textBox1.Text)，显然，正确的字符串进行某种规则加密后的密文为2yyUjXprc1+2TwAbbVU6eQ==。</p><h2 id="解法一：投机取巧"><a href="#解法一：投机取巧" class="headerlink" title="解法一：投机取巧"></a>解法一：投机取巧</h2><p>已知判断条件之后，可以修改判断条件为!=，因为随机输入一串字符串，相等的概率极低，那么相反，不相等的概率极高，修改之后，随便输入只要不是正确的明文就可以弹出恭喜的弹窗，实验了一下，因为ILSpy不能直接修改代码，所以讲代码保存出来进行修改，</p><p><img src="/medias/blog/4.png" alt="修改判断逻辑"></p><p>保存之后重新编译该文件，这样随便输入就可以弹出正确的弹窗了。</p><p><img src="/medias/blog/5.png" alt="第一次尝试成功"></p><h2 id="解法二：再次投机取巧"><a href="#解法二：再次投机取巧" class="headerlink" title="解法二：再次投机取巧"></a>解法二：再次投机取巧</h2><p>由于解法一虽然可以弹出正确的弹窗，但是正确的明文却还是不知道，所以这次还是投机取巧的办法，但是能够获取明文，这里针对加密函数编写了一段解密函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">public</span> string <span class="token function">Decode</span><span class="token punctuation">(</span><span class="token parameter">string data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string result<span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byte1<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>byte1 <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span><span class="token string">"2yyUjXprc1+2TwAbbVU6eQ=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token constant">ASCII</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">"gctf{got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token constant">ASCII</span><span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">"2niceday}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DESCryptoServiceProvider dESCryptoServiceProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESCryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MemoryStream memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CryptoStream cryptoStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CryptoStream</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">,</span>dESCryptoServiceProvider<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> bytes2<span class="token punctuation">)</span><span class="token punctuation">,</span>CryptoStreamMode<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>cryptoStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>byte1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byte1<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>cryptoStream<span class="token punctuation">.</span><span class="token function">FlushFinalBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding encoding <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span><span class="token constant">UTF8</span><span class="token punctuation">;</span>result <span class="token operator">=</span> encoding<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用该解密函数正确的密文进行解密得到正确的明文，这次不修改判断逻辑，修改错误的输出为解密正确的密文得到的明文。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">button1_Click</span><span class="token punctuation">(</span><span class="token parameter">object sender<span class="token punctuation">,</span> EventArgs e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2yyUjXprc1+2TwAbbVU6eQ=="</span> <span class="token operator">==</span> <span class="token function">Encode</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"Congratulation~!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token function">Decode</span><span class="token punctuation">(</span>textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>textBox1.Text就是我们输入的内容，那么我们输入密文，弹出的就是正确的明文了</p><p><img src="/medias/blog/8.png" alt="修改错误输出"></p><p>这样就可以得到明文内容了，是H0lyTru3EasY，这里再把明文输入就可以得到正确的提示了。</p><img src="/medias/blog/7.png" alt="正确提示" style="zoom:50%;"><h2 id="解法三：直接解密"><a href="#解法三：直接解密" class="headerlink" title="解法三：直接解密"></a>解法三：直接解密</h2><p>因为上个学期也学过密码学原理这门课，虽然我学的不咋地，但是还是尝试读懂了加密函数，发现这里采用了DES的CBC加密模式，并且使用了Base64进行编码，那么可以直接利用网上的解密工具，密钥从代码中可以得知是gctf{got，偏移值是2niceday}，直接进行解密也能获得明文。</p><p><img src="/medias/blog/6.png" alt="在线解密"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客&amp;&amp;动态规划</title>
      <link href="posts/62cb98ee.html"/>
      <url>posts/62cb98ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>观察下面的数字金字塔。写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。第一个行一个正整数r,表示行的数目。后面每行为这个数字金字塔特定行包含的整数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">        <span class="token number">7</span>       <span class="token number">3</span>   <span class="token number">8</span>     <span class="token number">8</span>   <span class="token number">1</span>   <span class="token number">0</span>   <span class="token number">2</span>   <span class="token number">7</span>   <span class="token number">4</span>   <span class="token number">4</span> <span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">6</span>   <span class="token number">5</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>动态规划有两种路线，这道题我选择了从底向上，用一个数组来存储每一个点的局部最大和，从倒数第二层开始，一直到顶层，最后得到的数组的第一位数就是最大值，代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">||</span> j <span class="token operator">==</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 最后可以通过OJ平台，但是在vs调试的时候发现数组栈溢出了。</p><h1 id="母牛的故事"><a href="#母牛的故事" class="headerlink" title="母牛的故事"></a>母牛的故事</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>通过列举前几年的关系，发现规律，前4年的数量和年份相同，第五年的时候，第二年的两头牛是成年母牛可以生殖了，所以应该是上一年的数量加上上四年的数量，因为题目给的年份不多，所以用一个55位的数组存储每一年的数量，再根据输入n的值，直接输出数组[n]。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">55</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一只小蜜蜂"><a href="#一只小蜜蜂" class="headerlink" title="一只小蜜蜂"></a>一只小蜜蜂</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。其中，蜂房的结构如下所示。</p><p><img src="/medias/blog/0.png" alt="小蜜蜂路线图"></p><p>输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b(0&lt;a&lt;b&lt;50)。对于每一个测试样例，输出蜜蜂从蜂房a到蜂房b的可能路线数。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>分析可知，a比b小，从a到b直接不好分析，从b开始，能直接到b的有b-1和b-2那么路线数就是两者之和，再分析b-1和b-2，发现规律一致，也是题目便利，数据都不大，可以用数组来表示可能路线数，这里的数组下标是两者的距离。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>b <span class="token operator">-</span> a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个坑，初始我定义k的时候类型是int，但是OJ报错，查了一下资料才发现数据越界，于是改成lli就行了。</p><h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数，对于每个测试实例，请输出不同走法的数量。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>这道题目读完以后不难发现，和小蜜蜂基本一致，只不过a固定是1罢了，数据范围还小了，直接上代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">41</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
